{
  "swagger": "2.0",
  "info": {
    "title": "Live API Reference",
    "version": "1.0.0",
    "description": "Reference for the Brightcove Live API, used to create and manage live streaming events."
  },
  "paths": {
    "/v1/vods": {
      "post": {
        "tags": [
          "Clips"
        ],
        "summary": "Create VOD Clip",
        "description": "Create VOD clips from a Live Stream. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content-Type: application/json "
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "X-API-KEY: {APIKey} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/vod_jobs"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Create_VOD_ClipError4xx"
            }
          },
          "Error 5xx": {
            "description": "Error 5xx",
            "schema": {
              "$ref": "#/definitions/Create_VOD_ClipError5xx"
            }
          }
        },
        "operationId": "Create_VOD_Clip"
      }
    },
    "/v1/credentials": {
      "get": {
        "tags": [
          "Credentials"
        ],
        "summary": "List Credentials",
        "description": "Get a list of credentials for a Live account. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content-Type: application/json "
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "X-API-KEY: {APIKey} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/vod_jobs"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/List_CredentialsError4xx"
            }
          },
          "Error 5xx": {
            "description": "Error 5xx",
            "schema": {
              "$ref": "#/definitions/List_CredentialsError5xx"
            }
          }
        },
        "operationId": "List_Credentials"
      }
    },
    "/v1/jobs/{jobId}/activate": {
      "put": {
        "tags": [
          "Live_Jobs"
        ],
        "summary": "Activate SEP Stream",
        "description": "Activate SEP (static entry point) Stream ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The job id for the stream you want to activate. "
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": application/json "
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "X-API-KEY: {APIKey} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Activate_SEP_StreamResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Activate_SEP_StreamError4xx"
            }
          },
          "Error 5xx": {
            "description": "Error 5xx",
            "schema": {
              "$ref": "#/definitions/Activate_SEP_StreamError5xx"
            }
          }
        },
        "operationId": "Activate_SEP_Stream"
      }
    },
    "/v1/jobs/{jobId}/cancel": {
      "put": {
        "tags": [
          "Live_Jobs"
        ],
        "summary": "Cancel Live Job",
        "description": "Cancel a live stream ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The job id for the stream you want to stop. "
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": application/json "
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "X-API-KEY: {APIKey} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Cancel_Live_JobResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Cancel_Live_JobError4xx"
            }
          },
          "Error 5xx": {
            "description": "Error 5xx",
            "schema": {
              "$ref": "#/definitions/Cancel_Live_JobError5xx"
            }
          }
        },
        "operationId": "Cancel_Live_Job"
      }
    },
    "/v1/jobs": {
      "post": {
        "tags": [
          "Live_Jobs"
        ],
        "summary": "Create a Live Job",
        "description": "Create a live stream ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": application/json "
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "X-API-KEY: {APIKey} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Create_a_Live_JobResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Create_a_Live_JobError4xx"
            }
          },
          "Error 5xx": {
            "description": "Error 5xx",
            "schema": {
              "$ref": "#/definitions/Create_a_Live_JobError5xx"
            }
          }
        },
        "operationId": "Create_a_Live_Job"
      }
    },
    "/v1/jobs/{jobId}/deactivate": {
      "put": {
        "tags": [
          "Live_Jobs"
        ],
        "summary": "Deactivate SEP Stream",
        "description": "Deactivate SEP (static entry point) Stream ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The job id for the stream you want to deactivate. "
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": application/json "
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "X-API-KEY: {APIKey} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Deactivate_SEP_StreamResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Deactivate_SEP_StreamError4xx"
            }
          },
          "Error 5xx": {
            "description": "Error 5xx",
            "schema": {
              "$ref": "#/definitions/Deactivate_SEP_StreamError5xx"
            }
          }
        },
        "operationId": "Deactivate_SEP_Stream"
      }
    },
    "/v1/jobs/{jobId}": {
      "get": {
        "tags": [
          "Live_Jobs"
        ],
        "summary": "Get Live Job Details",
        "description": "Get Live Job Details ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The job id you want details for. "
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": application/json "
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "X-API-KEY: {APIKey} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/job"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_Live_Job_DetailsError4xx"
            }
          },
          "Error 5xx": {
            "description": "Error 5xx",
            "schema": {
              "$ref": "#/definitions/Get_Live_Job_DetailsError5xx"
            }
          }
        },
        "operationId": "Get_Live_Job_Details"
      }
    },
    "/v1/jobs/{jobId}/id3tag": {
      "post": {
        "tags": [
          "Live_Jobs"
        ],
        "summary": "Insert ID3 timed metadata",
        "description": "Inserts an ID3 timed metadata tag for an ongoing job. Note that: 1) If using timecode property, the job only stores the most recent request for insertion; 2) If using timecode property, the encoder must be sending SMPTE-formatted (HH:MM:SS:FF) timecode stored in the tc property via OnFI ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The job id you want details for. "
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": application/json "
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "X-API-KEY: {APIKey} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Insert_ID3_timed_metadataResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Insert_ID3_timed_metadataError4xx"
            }
          },
          "Error 5xx": {
            "description": "Error 5xx",
            "schema": {
              "$ref": "#/definitions/Insert_ID3_timed_metadataError5xx"
            }
          }
        },
        "operationId": "Insert_ID3_timed_metadata"
      }
    },
    "/v1/jobs/{jobId}/cuepoint": {
      "post": {
        "tags": [
          "Live_Jobs"
        ],
        "summary": "Manual Ad Cue Point Insertion",
        "description": "Inserts a manual Cue-Out with a duration to the Live ingest point. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The job id you want details for. "
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": application/json "
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "X-API-KEY: {APIKey} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Manual_Ad_Cue_Point_InsertionResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Manual_Ad_Cue_Point_InsertionError4xx"
            }
          },
          "Error 5xx": {
            "description": "Error 5xx",
            "schema": {
              "$ref": "#/definitions/Manual_Ad_Cue_Point_InsertionError5xx"
            }
          }
        },
        "operationId": "Manual_Ad_Cue_Point_Insertion"
      }
    },
    "/v1/ssai/application": {
      "post": {
        "tags": [
          "SSAI"
        ],
        "summary": "Create Ad Configuration",
        "description": "Create a configuration for server-side ad application. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content-Type: application/json "
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "X-API-KEY: {APIKey} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/application"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Create_Ad_ConfigurationError4xx"
            }
          }
        },
        "operationId": "Create_Ad_Configuration"
      }
    },
    "/v1/ssai/beaconset": {
      "post": {
        "tags": [
          "SSAI"
        ],
        "summary": "Create beacon set",
        "description": "Beacons are data points on playback sent to ad servers to track whether and how much of ads were played. Creates a beacon set. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content-Type: application/json "
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "X-API-KEY: {APIKey} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/beacon_set"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Create_beacon_setError4xx"
            }
          }
        },
        "operationId": "Create_beacon_set"
      }
    },
    "/v1/ssai/application/{application_id}": {
      "delete": {
        "tags": [
          "SSAI"
        ],
        "summary": "Delete Ad Configuration",
        "description": "Delete an ad application. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "required": true,
            "type": "object",
            "description": "The ad application id "
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content-Type: application/json "
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "X-API-KEY: {APIKey} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Delete_Ad_ConfigurationResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Delete_Ad_ConfigurationError4xx"
            }
          },
          "Error 5xx": {
            "description": "Error 5xx",
            "schema": {
              "$ref": "#/definitions/Delete_Ad_ConfigurationError5xx"
            }
          }
        },
        "operationId": "Delete_Ad_Configuration"
      },
      "get": {
        "tags": [
          "SSAI"
        ],
        "summary": "Get Ad Configuration",
        "description": "Get an ad application. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "required": true,
            "type": "object",
            "description": "The ad application id "
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content-Type: application/json "
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "X-API-KEY: {APIKey} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/application"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_Ad_ConfigurationError4xx"
            }
          },
          "Error 5xx": {
            "description": "Error 5xx",
            "schema": {
              "$ref": "#/definitions/Get_Ad_ConfigurationError5xx"
            }
          }
        },
        "operationId": "Get_Ad_Configuration"
      },
      "put": {
        "tags": [
          "SSAI"
        ],
        "summary": "Update Ad Configuration",
        "description": "Update a configuration for server-side ad application. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "application_id",
            "in": "path",
            "required": true,
            "type": "object",
            "description": "The ad application id "
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content-Type: application/json "
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "X-API-KEY: {APIKey} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/application"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Update_Ad_ConfigurationError4xx"
            }
          },
          "Error 5xx": {
            "description": "Error 5xx",
            "schema": {
              "$ref": "#/definitions/Update_Ad_ConfigurationError5xx"
            }
          }
        },
        "operationId": "Update_Ad_Configuration"
      }
    },
    "/v1/ssai/slates/{SLATE_MSA_ID}": {
      "delete": {
        "tags": [
          "SSAI"
        ],
        "summary": "Delete Slate Media Source Asset",
        "description": "Ingest Slate Media Source Asset. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "SLATE_MSA_ID",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "URL The id for the Slate media source asset "
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content-Type: application/json "
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "X-API-KEY: {APIKey} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Delete_Slate_Media_Source_AssetResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Delete_Slate_Media_Source_AssetError4xx"
            }
          },
          "Error 5xx": {
            "description": "Error 5xx",
            "schema": {
              "$ref": "#/definitions/Delete_Slate_Media_Source_AssetError5xx"
            }
          }
        },
        "operationId": "Delete_Slate_Media_Source_Asset"
      }
    },
    "/v1/ssai/beaconset/BEACON_SET_ID": {
      "delete": {
        "tags": [
          "SSAI"
        ],
        "summary": "Delete beacon set",
        "description": "Deletes a beacon set. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "BEACON_SET_ID",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "URL The id for the beacon set "
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content-Type: application/json "
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "X-API-KEY: {APIKey} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Delete_beacon_setResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Delete_beacon_setError4xx"
            }
          },
          "Error 5xx": {
            "description": "Error 5xx",
            "schema": {
              "$ref": "#/definitions/Delete_beacon_setError5xx"
            }
          }
        },
        "operationId": "Delete_beacon_set"
      },
      "put": {
        "tags": [
          "SSAI"
        ],
        "summary": "Update beacon set",
        "description": "Updates a beacon set. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content-Type: application/json "
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "X-API-KEY: {APIKey} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/beacon_set"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Update_beacon_setError4xx"
            }
          },
          "Error 5xx": {
            "description": "Error 5xx",
            "schema": {
              "$ref": "#/definitions/Update_beacon_setError5xx"
            }
          }
        },
        "operationId": "Update_beacon_set"
      }
    },
    "/v1/ssai/applications/{account_id}": {
      "get": {
        "tags": [
          "SSAI"
        ],
        "summary": "Get Account Ad Configurations",
        "description": "Get ad applications for an account. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": false,
            "type": "object",
            "description": "The Live account id (if you leave this out, request will still work) "
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content-Type: application/json "
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "X-API-KEY: {APIKey} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/application"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_Account_Ad_ConfigurationsError4xx"
            }
          },
          "Error 5xx": {
            "description": "Error 5xx",
            "schema": {
              "$ref": "#/definitions/Get_Account_Ad_ConfigurationsError5xx"
            }
          }
        },
        "operationId": "Get_Account_Ad_Configurations"
      }
    },
    "/v1/ssai/slates/{ACCOUNT_ID}": {
      "get": {
        "tags": [
          "SSAI"
        ],
        "summary": "Get Slate Media Source Assets",
        "description": "Get Slate Media Source Assets for an account. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ACCOUNT_ID",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "URL The account id "
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content-Type: application/json "
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "X-API-KEY: {APIKey} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Get_Slate_Media_Source_AssetsResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_Slate_Media_Source_AssetsError4xx"
            }
          },
          "Error 5xx": {
            "description": "Error 5xx",
            "schema": {
              "$ref": "#/definitions/Get_Slate_Media_Source_AssetsError5xx"
            }
          }
        },
        "operationId": "Get_Slate_Media_Source_Assets"
      }
    },
    "/v1/ssai/beaconsets/{account_id}": {
      "get": {
        "tags": [
          "SSAI"
        ],
        "summary": "Get beacon sets",
        "description": "Get all beacon sets for an account. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The Live account id "
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content-Type: application/json "
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "X-API-KEY: {APIKey} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/beacon_set"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_beacon_setsError4xx"
            }
          },
          "Error 5xx": {
            "description": "Error 5xx",
            "schema": {
              "$ref": "#/definitions/Get_beacon_setsError5xx"
            }
          }
        },
        "operationId": "Get_beacon_sets"
      }
    },
    "/v1/ssai/beaconsets": {
      "get": {
        "tags": [
          "SSAI"
        ],
        "summary": "Get beacon sets for user",
        "description": "Get all beacon sets for the requesting user. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content-Type: application/json "
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "X-API-KEY: {APIKey} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/beacon_set"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_beacon_sets_for_userError4xx"
            }
          },
          "Error 5xx": {
            "description": "Error 5xx",
            "schema": {
              "$ref": "#/definitions/Get_beacon_sets_for_userError5xx"
            }
          }
        },
        "operationId": "Get_beacon_sets_for_user"
      }
    },
    "/v1/ssai/slates": {
      "post": {
        "tags": [
          "SSAI"
        ],
        "summary": "Ingest Slate Media Source Asset",
        "description": "Ingest Slate Media Source Asset. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content-Type: application/json "
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "X-API-KEY: {APIKey} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Ingest_Slate_Media_Source_AssetResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Ingest_Slate_Media_Source_AssetError4xx"
            }
          }
        },
        "operationId": "Ingest_Slate_Media_Source_Asset"
      }
    },
    "": {
      "": {
        "tags": [
          "_Users_rcrooks_git_Brightcove_API_References_live_api_v1_doc_main_js"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "Success 200": {
            "description": "Success 200"
          }
        },
        "operationId": ""
      }
    }
  },
  "definitions": {
    "vod_jobs": {
      "properties": {
        "jvod_id": {
          "type": "string",
          "description": "The clip job id "
        },
        "label": {
          "type": "string",
          "description": "The clip label (from the input) "
        }
      },
      "required": [
        "jvod_id",
        "label"
      ]
    },
    "Create_VOD_ClipResponseFields": {
      "properties": {
        "live_job_id": {
          "type": "string",
          "description": "The clip label (from the input) "
        }
      },
      "required": [
        "live_job_id"
      ]
    },
    "Create_VOD_ClipError4xx": {
      "properties": {
        "BAD": {
          "type": "json",
          "description": "REQUEST 400: Invalid input value - see Live API Error Messages for more details "
        },
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Unauthorized - see Live API Error Messages for more details "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
        }
      },
      "required": [
        "BAD",
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND"
      ]
    },
    "Create_VOD_ClipError5xx": {
      "properties": {
        "INTERNAL": {
          "type": "json",
          "description": "SERVER ERROR 500: DB getItem, no results found - see Live API Error Messages for more details "
        }
      },
      "required": [
        "INTERNAL"
      ]
    },
    "List_CredentialsResponseFields": {
      "properties": {
        "live_job_id": {
          "type": "string",
          "description": "The clip label (from the input) "
        }
      },
      "required": [
        "live_job_id"
      ]
    },
    "List_CredentialsError4xx": {
      "properties": {
        "BAD": {
          "type": "json",
          "description": "REQUEST 400: Invalid input value - see Live API Error Messages for more details "
        },
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Unauthorized - see Live API Error Messages for more details "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
        }
      },
      "required": [
        "BAD",
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND"
      ]
    },
    "List_CredentialsError5xx": {
      "properties": {
        "INTERNAL": {
          "type": "json",
          "description": "SERVER ERROR 500: DB getItem, no results found - see Live API Error Messages for more details "
        }
      },
      "required": [
        "INTERNAL"
      ]
    },
    "Activate_SEP_StreamResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The job id for the stream that was activated "
        }
      },
      "required": [
        "id"
      ]
    },
    "Activate_SEP_StreamError4xx": {
      "properties": {
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Unauthorized - see Live API Error Messages for more details "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
        }
      },
      "required": [
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND"
      ]
    },
    "Activate_SEP_StreamError5xx": {
      "properties": {
        "INTERNAL": {
          "type": "json",
          "description": "SERVER ERROR 500: DB getItem, no results found - see Live API Error Messages for more details "
        }
      },
      "required": [
        "INTERNAL"
      ]
    },
    "Cancel_Live_JobResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The job id for the stream that was stopped "
        }
      },
      "required": [
        "id"
      ]
    },
    "Cancel_Live_JobError4xx": {
      "properties": {
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Unauthorized - see Live API Error Messages for more details "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
        }
      },
      "required": [
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND"
      ]
    },
    "Cancel_Live_JobError5xx": {
      "properties": {
        "INTERNAL": {
          "type": "json",
          "description": "SERVER ERROR 500: DB getItem, no results found - see Live API Error Messages for more details "
        }
      },
      "required": [
        "INTERNAL"
      ]
    },
    "Create_a_Live_JobResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Id for the stream. "
        },
        "stream_url": {
          "type": "string",
          "description": "The stream URL to add to your encoder configuration. "
        },
        "stream_name": {
          "type": "string",
          "description": "The stream name to add to your encoder configuration. "
        },
        "outputs": {
          "type": "array",
          "description": "Details on each output rendition of the Live job. ",
          "items": {
            "$ref": "#/definitions/outputs"
          }
        },
        "live_stream": {
          "type": "boolean",
          "description": "Indicates that the job is a live streaming job. "
        },
        "ad_insertion": {
          "type": "boolean",
          "description": "Setting this parameter to true will enable server side ad insertion (SSAI) on the job. Current support includes, DFP, Freewheel, or any VAST 2.0/3.0 ad tags. "
        },
        "region": {
          "type": "string",
          "description": "You can specify an Amazon AWS region to use for encoding a job and we will process the job on servers in the region specified. It’s recommended to use the region closest to your encoder. "
        },
        "reconnect_time": {
          "type": "number",
          "description": "The time, in seconds, to wait for a stream to reconnect to the encoder. Default is set to 30 seconds. "
        },
        "event_length": {
          "type": "number",
          "description": "The minimum time, in seconds, to keep a live stream available. At any point within the specified event_length you may reconnect to your stream. The event_length setting goes into effect as soon as streaming begins. "
        },
        "max_hls_protocol_version": {
          "type": "number",
          "description": "Sets the maximum HLS protocol version to use. Special features will be used as available. Default is 3. "
        },
        "slate": {
          "type": "string",
          "description": "id for slate of assets to be included "
        },
        "sep_state": {
          "type": "string",
          "description": "The current state of the job&#39;s SEP (static entry point) - possible values: &#39;waiting&#39; &#39;pending_activation&#39;, &#39;activation_in_progress&#39;, &#39;ready&#39;, &#39;pending_deactivation&#39;, &#39;deactivation_in_progress&#39;, &#39;cancelled&#39;, &#39;finished&#39; "
        },
        "notifications": {
          "type": "array",
          "description": "Array of notification destination objects or strings.  A notification will be sent to the destination when selected event occurs. You can use a simple string with a url: &quot;http://log:pass@httpbin.org/post&quot;, or you can use an object. ",
          "items": {
            "type": "mixed"
          }
        },
        "add_cdns": {
          "type": "array",
          "description": "Array of additional CDN providers to be used for manifest generation. For each CDN provided, the manifest will be prepended accordingly ",
          "items": {
            "$ref": "#/definitions/add_cdns"
          }
        }
      },
      "required": [
        "id",
        "stream_url",
        "stream_name",
        "outputs",
        "live_stream",
        "ad_insertion",
        "region",
        "reconnect_time",
        "event_length",
        "max_hls_protocol_version",
        "slate",
        "sep_state",
        "notifications",
        "add_cdns"
      ]
    },
    "outputs": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique id for the rendition. "
        },
        "playback_url": {
          "type": "string",
          "description": "Media HLS manifest for the specified rendition (non-SSAI). "
        },
        "playback_url_dvr": {
          "type": "string",
          "description": "Media HLS manifest for the specified rendition (with DVR capability). "
        },
        "playback_url_vod": {
          "type": "string",
          "description": "Media HLS manifest for the VOD version of the stream if one was specified in the job settings - note that the VOD will not be available until the live event has finished and the creation of the VOD is complete. "
        }
      },
      "required": [
        "id",
        "playback_url",
        "playback_url_dvr",
        "playback_url_vod"
      ]
    },
    "notifications": {
      "properties": {
        "url": {
          "type": "string",
          "description": "Destination for the notification. "
        },
        "credentials": {
          "type": "string",
          "description": "Credentials for the destination, if required. "
        },
        "event": {
          "type": "string",
          "description": "Event type to send notifications for.  It’s recommended to set events on the job and not individual rendition outputs since renditions will finish simultaneously. "
        }
      },
      "required": [
        "url",
        "credentials",
        "event"
      ]
    },
    "add_cdns": {
      "properties": {
        "label": {
          "type": "string",
          "description": "A label to identify the CDN. "
        },
        "prepend": {
          "type": "string",
          "description": "Typically, a domain or path to prepend to addresses "
        },
        "protocol": {
          "type": "string",
          "description": "Protocol to use in sending the stream to the CDN. "
        }
      },
      "required": [
        "label",
        "prepend",
        "protocol"
      ]
    },
    "Create_a_Live_JobError4xx": {
      "properties": {
        "BAD": {
          "type": "json",
          "description": "REQUEST 400: Invalid region - see Live API Error Messages for more details "
        },
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Unauthorized - see Live API Error Messages for more details "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
        }
      },
      "required": [
        "BAD",
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND"
      ]
    },
    "Create_a_Live_JobError5xx": {
      "properties": {
        "INTERNAL": {
          "type": "json",
          "description": "SERVER ERROR 500: After filtering, there is no job to process - see Live API Error Messages for more details "
        }
      },
      "required": [
        "INTERNAL"
      ]
    },
    "Deactivate_SEP_StreamResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The job id for the stream that was Deactivated "
        }
      },
      "required": [
        "id"
      ]
    },
    "Deactivate_SEP_StreamError4xx": {
      "properties": {
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Unauthorized - see Live API Error Messages for more details "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
        }
      },
      "required": [
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND"
      ]
    },
    "Deactivate_SEP_StreamError5xx": {
      "properties": {
        "INTERNAL": {
          "type": "json",
          "description": "SERVER ERROR 500: DB getItem, no results found - see Live API Error Messages for more details "
        }
      },
      "required": [
        "INTERNAL"
      ]
    },
    "job": {
      "properties": {
        "created_at": {
          "type": "datetimestring",
          "description": "ISO 8601 date-time string representing when the job was created "
        },
        "finished_at": {
          "type": "datetimestring",
          "description": "ISO 8601 date-time string representing when the live stream was stopped "
        },
        "id": {
          "type": "string",
          "description": "The live job id "
        },
        "privacy": {
          "type": "boolean",
          "description": "TODO "
        },
        "state": {
          "type": "string",
          "description": "The current state of the job - possible values for Live jobs are standby, waiting, processing, disconnected. finishing, finished, cancelling, cancelled, failed; possible values for VOD jobs are waiting_finish_live, waiting, processing, creating_asset, cancelling, cancelled, finished, failed "
        },
        "submitted_at": {
          "type": "datetimestring",
          "description": "ISO 8601 date-time string representing when the job was submitted "
        },
        "test": {
          "type": "boolean",
          "description": "TODO "
        },
        "updated_at": {
          "type": "datetimestring",
          "description": "ISO 8601 date-time string representing when the job was last modified "
        },
        "region": {
          "type": "string",
          "description": "The Amazon AWS region to use for encoding the job "
        },
        "reconnect_time": {
          "type": "number",
          "description": "The time, in seconds, that the system will wait for a stream to reconnect to the encoder "
        },
        "event_length": {
          "type": "number",
          "description": "The time, in seconds, that the system will keep the live stream available "
        },
        "live_stream": {
          "type": "boolean",
          "description": "Indicates whether this is a live stream or VOD "
        },
        "ad_insertion": {
          "type": "boolean",
          "description": "Indicates whether SSAI is enabled "
        },
        "metadata_passthrough": {
          "type": "boolean",
          "description": "TODO "
        },
        "out_worker_bytes": {
          "type": "number",
          "description": "TODO "
        },
        "out_worker_bytes_rate": {
          "type": "number",
          "description": "TODO "
        },
        "playback_url": {
          "type": "string",
          "description": "Playback URL for the live stream "
        },
        "playback_url_dvr": {
          "type": "string",
          "description": "Playback URL for the live DVR "
        },
        "input_media_file": {
          "type": "object",
          "description": "Object containing properties for the input media file ",
          "$ref": "#/definitions/job.input_media_file"
        },
        "slate": {
          "type": "string",
          "description": "id for a slate of assets included "
        },
        "stream": {
          "type": "object",
          "description": "Object containing properties for the live stream ",
          "$ref": "#/definitions/job.stream"
        },
        "output_media_files": {
          "type": "array",
          "description": "Array of objects containing properties for the output media files ",
          "items": {
            "$ref": "#/definitions/job.output_media_files"
          }
        }
      },
      "required": [
        "created_at",
        "finished_at",
        "id",
        "privacy",
        "state",
        "submitted_at",
        "test",
        "updated_at",
        "region",
        "reconnect_time",
        "event_length",
        "live_stream",
        "ad_insertion",
        "metadata_passthrough",
        "out_worker_bytes",
        "out_worker_bytes_rate",
        "playback_url",
        "playback_url_dvr",
        "input_media_file",
        "slate",
        "stream",
        "output_media_files"
      ]
    },
    "job.input_media_file": {
      "properties": {
        "audio_bitrate_in_kbps": {
          "type": "number",
          "description": "Audio bitrate of the input media file "
        },
        "audio_codec": {
          "type": "string",
          "description": "Audio codec of the input media file "
        },
        "audio_sample_rate": {
          "type": "number",
          "description": "Audio sample rate of the input media file "
        },
        "audio_tracks": {
          "type": "number",
          "description": "The number of audio tracks "
        },
        "channels": {
          "type": "number",
          "description": "The number of audio channels "
        },
        "created_at": {
          "type": "datetimestring",
          "description": "ISO 8601 date-time string representing when the input file was created "
        },
        "duration_in_ms": {
          "type": "number",
          "description": "duration_in_ms. "
        },
        "error_class": {
          "type": "string",
          "description": "Type of error thrown "
        },
        "error_message": {
          "type": "string",
          "description": "Error message thrown "
        },
        "file_size_bytes": {
          "type": "number",
          "description": "File size "
        },
        "finished_at": {
          "type": "datetimestring",
          "description": "ISO 8601 date-time string representing when the input file was finished "
        },
        "format": {
          "type": "string",
          "description": "Format of the input file "
        },
        "frame_rate": {
          "type": "number",
          "description": "Frame rate of the input file "
        },
        "height": {
          "type": "number",
          "description": "Frame height of the input file "
        },
        "id": {
          "type": "string",
          "description": "System id of the input file "
        },
        "md5_checksum": {
          "type": "string",
          "description": "Checksum for the input file "
        },
        "privacy": {
          "type": "boolean",
          "description": "TODO "
        },
        "state": {
          "type": "string",
          "description": "Current state of input file processing "
        },
        "test": {
          "type": "boolean",
          "description": "TODO "
        },
        "updated_at": {
          "type": "datetimestring",
          "description": "ISO 8601 date-time string representing when the input file was last modified "
        },
        "video_bitrate_in_kbps": {
          "type": "number",
          "description": "Video bitrate of the input media file "
        },
        "video_codec": {
          "type": "string",
          "description": "Video codec of the input media file "
        },
        "width": {
          "type": "number",
          "description": "Frame width of the input media file "
        },
        "total_bitrate_in_kbps": {
          "type": "number",
          "description": "Total bitrate of the input media file "
        },
        "url": {
          "type": "string",
          "description": "URL for the input media file "
        }
      },
      "required": [
        "audio_bitrate_in_kbps",
        "audio_codec",
        "audio_sample_rate",
        "audio_tracks",
        "channels",
        "created_at",
        "duration_in_ms",
        "error_class",
        "error_message",
        "file_size_bytes",
        "finished_at",
        "format",
        "frame_rate",
        "height",
        "id",
        "md5_checksum",
        "privacy",
        "state",
        "test",
        "updated_at",
        "video_bitrate_in_kbps",
        "video_codec",
        "width",
        "total_bitrate_in_kbps",
        "url"
      ]
    },
    "job.stream": {
      "properties": {
        "created_at": {
          "type": "datetimestring",
          "description": "ISO 8601 date-time string representing when the stream was created "
        },
        "duration": {
          "type": "number",
          "description": "ISO Duration of the stream in seconds "
        },
        "finished_at": {
          "type": "datetimestring",
          "description": "ISO 8601 date-time string representing when the stream was finished "
        },
        "height": {
          "type": "number",
          "description": "Frame height of the stream "
        },
        "id": {
          "type": "string",
          "description": "System id of the stream "
        },
        "name": {
          "type": "string",
          "description": "Name of the stream "
        },
        "protocol": {
          "type": "string",
          "description": "Protocol of the stream "
        },
        "test": {
          "type": "boolean",
          "description": "TODO "
        },
        "updated_at": {
          "type": "datetimestring",
          "description": "ISO 8601 date-time string representing when the stream was last modified "
        },
        "video_bitrate_in_kbps": {
          "type": "number",
          "description": "Video bitrate of the input media file "
        },
        "video_codec": {
          "type": "string",
          "description": "Video codec of the input media file "
        },
        "width": {
          "type": "number",
          "description": "Frame width of the stream "
        },
        "total_bitrate_in_kbps": {
          "type": "number",
          "description": "Total bitrate of the stream "
        },
        "region": {
          "type": "string",
          "description": "AWS region list specified for the account "
        },
        "url": {
          "type": "string",
          "description": "URL for the stream "
        },
        "location": {
          "type": "object",
          "description": "Object representing the location of the stream ",
          "$ref": "#/definitions/job.stream.location"
        },
        "destination": {
          "type": "object",
          "description": "Object representing the destination of the stream ",
          "$ref": "#/definitions/job.stream.destination"
        },
        "in_worker_bytes": {
          "type": "number",
          "description": "TODO "
        },
        "in_worker_bytes_rate": {
          "type": "number",
          "description": "TODO "
        }
      },
      "required": [
        "created_at",
        "duration",
        "finished_at",
        "height",
        "id",
        "name",
        "protocol",
        "test",
        "updated_at",
        "video_bitrate_in_kbps",
        "video_codec",
        "width",
        "total_bitrate_in_kbps",
        "region",
        "url",
        "location",
        "destination",
        "in_worker_bytes",
        "in_worker_bytes_rate"
      ]
    },
    "job.stream.location": {
      "properties": {
        "source": {
          "type": "object",
          "description": "Object representing the location source of the stream ",
          "$ref": "#/definitions/job.stream.location.source"
        }
      },
      "required": [
        "source"
      ]
    },
    "job.stream.location.source": {
      "properties": {
        "latitude": {
          "type": "object",
          "description": "TODO ",
          "$ref": "#/definitions/job.stream.location.source.latitude"
        },
        "longitude": {
          "type": "object",
          "description": "TODO ",
          "$ref": "#/definitions/job.stream.location.source.longitude"
        },
        "location": {
          "type": "object",
          "description": "TODO ",
          "$ref": "#/definitions/job.stream.location.source.location"
        }
      },
      "required": [
        "latitude",
        "longitude",
        "location"
      ]
    },
    "job.stream.destination": {
      "properties": {
        "source": {
          "type": "object",
          "description": "Object representing the destination source of the stream ",
          "$ref": "#/definitions/job.stream.destination.source"
        }
      },
      "required": [
        "source"
      ]
    },
    "job.stream.destination.source": {
      "properties": {
        "latitude": {
          "type": "object",
          "description": "TODO ",
          "$ref": "#/definitions/job.stream.destination.source.latitude"
        },
        "longitude": {
          "type": "object",
          "description": "TODO ",
          "$ref": "#/definitions/job.stream.destination.source.longitude"
        },
        "location": {
          "type": "object",
          "description": "TODO ",
          "$ref": "#/definitions/job.stream.destination.source.location"
        }
      },
      "required": [
        "latitude",
        "longitude",
        "location"
      ]
    },
    "job.output_media_files": {
      "properties": {
        "audio_bitrate_in_kbps": {
          "type": "number",
          "description": "Audio bitrate of the output media file "
        },
        "audio_codec": {
          "type": "string",
          "description": "Audio codec of the output media file "
        },
        "audio_sample_rate": {
          "type": "number",
          "description": "Audio sample rate of the output media file "
        },
        "audio_tracks": {
          "type": "number",
          "description": "The number of audio tracks "
        },
        "channels": {
          "type": "number",
          "description": "The number of audio channels "
        },
        "created_at": {
          "type": "datetimestring",
          "description": "ISO 8601 date-time string representing when the output file was created "
        },
        "duration_in_ms": {
          "type": "number",
          "description": "ISO 8601 date-time string representing when the output file was created "
        },
        "error_class": {
          "type": "string",
          "description": "Type of error thrown "
        },
        "error_message": {
          "type": "string",
          "description": "Error message thrown "
        },
        "file_size_bytes": {
          "type": "number",
          "description": "File size "
        },
        "finished_at": {
          "type": "datetimestring",
          "description": "ISO 8601 date-time string representing when the output file was finished "
        },
        "format": {
          "type": "string",
          "description": "Format of the output file "
        },
        "fragment_duration_in_ms": {
          "type": "number",
          "description": "TODO "
        },
        "frame_rate": {
          "type": "number",
          "description": "Frame rate of the output file "
        },
        "height": {
          "type": "number",
          "description": "Frame height of the output file "
        },
        "id": {
          "type": "string",
          "description": "System id of the output file "
        },
        "md5_checksum": {
          "type": "string",
          "description": "Checksum for the output file "
        },
        "privacy": {
          "type": "boolean",
          "description": "TODO "
        },
        "rfc_6381_audio_codec": {
          "type": "string",
          "description": "TODO "
        },
        "rfc_6381_video_codec": {
          "type": "string",
          "description": "TODO "
        },
        "state": {
          "type": "string",
          "description": "Current state of output file processing "
        },
        "test": {
          "type": "boolean",
          "description": "TODO "
        },
        "updated_at": {
          "type": "datetimestring",
          "description": "ISO 8601 date-time string representing when the output file was last modified "
        },
        "video_bitrate_in_kbps": {
          "type": "number",
          "description": "Video bitrate of the output media file "
        },
        "video_codec": {
          "type": "string",
          "description": "Video codec of the output media file "
        },
        "width": {
          "type": "number",
          "description": "Frame width of the output media file "
        },
        "total_bitrate_in_kbps": {
          "type": "number",
          "description": "Total bitrate of the output media file "
        },
        "keyframe_interval": {
          "type": "number",
          "description": "Keyframe interval for the output media file "
        },
        "keyframe_interval_follow_source": {
          "type": "boolean",
          "description": "Whether keyframe rate for the output matches the source "
        },
        "live_stream": {
          "type": "number",
          "description": "Whether the output is a live stream "
        },
        "playback_url": {
          "type": "string",
          "description": "URL for the output file "
        },
        "playback_url_dvr": {
          "type": "string",
          "description": "Live DVR url for live stream output "
        },
        "playback_url_vod": {
          "type": "string",
          "description": "URL for VOD output "
        },
        "playlist_type": {
          "type": "string",
          "description": "Playlist type for playlist output "
        },
        "type": {
          "type": "string",
          "description": "Will be playlist for playlist output "
        },
        "filename": {
          "type": "string",
          "description": "File name for the playlist manifest "
        },
        "dvr_filename": {
          "type": "string",
          "description": "File name for the DVR playlist manifest "
        }
      },
      "required": [
        "audio_bitrate_in_kbps",
        "audio_codec",
        "audio_sample_rate",
        "audio_tracks",
        "channels",
        "created_at",
        "duration_in_ms",
        "error_class",
        "error_message",
        "file_size_bytes",
        "finished_at",
        "format",
        "fragment_duration_in_ms",
        "frame_rate",
        "height",
        "id",
        "md5_checksum",
        "privacy",
        "rfc_6381_audio_codec",
        "rfc_6381_video_codec",
        "state",
        "test",
        "updated_at",
        "video_bitrate_in_kbps",
        "video_codec",
        "width",
        "total_bitrate_in_kbps",
        "keyframe_interval",
        "keyframe_interval_follow_source",
        "live_stream",
        "playback_url",
        "playback_url_dvr",
        "playback_url_vod",
        "playlist_type",
        "type",
        "filename",
        "dvr_filename"
      ]
    },
    "Get_Live_Job_DetailsError4xx": {
      "properties": {
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Unauthorized - see Live API Error Messages for more details "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
        }
      },
      "required": [
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND"
      ]
    },
    "Get_Live_Job_DetailsError5xx": {
      "properties": {
        "INTERNAL": {
          "type": "json",
          "description": "SERVER ERROR 500: DB getItem, no results found - see Live API Error Messages for more details "
        }
      },
      "required": [
        "INTERNAL"
      ]
    },
    "Insert_ID3_timed_metadataResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The job id "
        },
        "id3_tag": {
          "type": "object",
          "description": "The ID3 tag details ",
          "$ref": "#/definitions/id3_tag"
        }
      },
      "required": [
        "id",
        "id3_tag"
      ]
    },
    "id3_tag": {
      "properties": {
        "tag_name": {
          "type": "string",
          "description": "The ID3 tag name "
        },
        "tag_value": {
          "type": "string",
          "description": "The ID3 tag value "
        }
      },
      "required": [
        "tag_name",
        "tag_value"
      ]
    },
    "Insert_ID3_timed_metadataError4xx": {
      "properties": {
        "BAD": {
          "type": "json",
          "description": "REQUEST 400: Invalid input value - see Live API Error Messages for more details "
        },
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Unauthorized - see Live API Error Messages for more details "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
        }
      },
      "required": [
        "BAD",
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND"
      ]
    },
    "Insert_ID3_timed_metadataError5xx": {
      "properties": {
        "INTERNAL": {
          "type": "json",
          "description": "SERVER ERROR 500: DB getItem, no results found - see Live API Error Messages for more details "
        }
      },
      "required": [
        "INTERNAL"
      ]
    },
    "Manual_Ad_Cue_Point_InsertionResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the live stream job "
        },
        "cue_point": {
          "type": "object",
          "description": "The cuepoint data ",
          "$ref": "#/definitions/cue_point"
        }
      },
      "required": [
        "id",
        "cue_point"
      ]
    },
    "cue_point": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The cuepoint id "
        },
        "duration": {
          "type": "number",
          "description": "The cuepoint duration in seconds "
        },
        "accuracy": {
          "type": "string",
          "description": "The cuepoint insertion accuracy - may be segment or frame "
        },
        "inserted_at": {
          "type": "datetimestring",
          "description": "Time when the cue point was inserted in the stream "
        }
      },
      "required": [
        "id",
        "duration",
        "accuracy",
        "inserted_at"
      ]
    },
    "Manual_Ad_Cue_Point_InsertionError4xx": {
      "properties": {
        "BAD": {
          "type": "json",
          "description": "REQUEST 400: Invalid input value - see Live API Error Messages for more details "
        },
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Unauthorized - see Live API Error Messages for more details "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
        }
      },
      "required": [
        "BAD",
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND"
      ]
    },
    "Manual_Ad_Cue_Point_InsertionError5xx": {
      "properties": {
        "INTERNAL": {
          "type": "json",
          "description": "SERVER ERROR 500: DB getItem, no results found - see Live API Error Messages for more details "
        }
      },
      "required": [
        "INTERNAL"
      ]
    },
    "application": {
      "properties": {
        "account_id": {
          "type": "string",
          "description": "The account id "
        },
        "description": {
          "type": "string",
          "description": "The ad application description "
        },
        "application_ad_configuration": {
          "type": "object",
          "description": "The ad configuration object for the application ",
          "$ref": "#/definitions/application.application_ad_configuration"
        },
        "application_id": {
          "type": "string",
          "description": "The ad application id "
        }
      },
      "required": [
        "account_id",
        "description",
        "application_ad_configuration",
        "application_id"
      ]
    },
    "application.application_ad_configuration": {
      "properties": {
        "ad_configuration_description": {
          "type": "string",
          "description": "The ad configuration description "
        },
        "response_type": {
          "type": "string",
          "description": "The ad configuration response type (Dfp, Vast, or SmartXML) "
        },
        "headers": {
          "type": "object",
          "description": "The ad configuration headers ",
          "$ref": "#/definitions/application.application_ad_configuration.headers"
        },
        "ad_configuration_strategy": {
          "type": "string",
          "description": "The ad configuration strategy (SingleAdResponse, or MultipleAdResponse) "
        },
        "ad_configuration_transforms": {
          "type": "array",
          "description": "The ad configuration transforms ",
          "items": {
            "$ref": "#/definitions/application.application_ad_configuration.ad_configuration_transforms"
          }
        },
        "ad_configuration_url_format": {
          "type": "string",
          "description": "The URL template for the ad server "
        },
        "ad_configuration_variables": {
          "type": "object",
          "description": "Key/value pairs for the ad server URL template ",
          "$ref": "#/definitions/application.application_ad_configuration.ad_configuration_variables"
        }
      },
      "required": [
        "ad_configuration_description",
        "response_type",
        "headers",
        "ad_configuration_strategy",
        "ad_configuration_transforms",
        "ad_configuration_url_format",
        "ad_configuration_variables"
      ]
    },
    "application_ad_configuration": {
      "properties": {
        "ad_configuration_headers_for_impressions": {
          "type": "boolean",
          "description": "If true, this configuration will send headers on all ad requests and impressions; if false, headers will not be sent on impressions (quartiles/impressions that we fire for tracking from an ad response). "
        }
      },
      "required": [
        "ad_configuration_headers_for_impressions"
      ]
    },
    "application.application_ad_configuration.ad_configuration_transforms": {
      "properties": {
        "xpath": {
          "type": "string",
          "description": "The ad configuration transform xpath "
        },
        "xslt": {
          "type": "string",
          "description": "The ad configuration transform xslt "
        }
      },
      "required": [
        "xpath",
        "xslt"
      ]
    },
    "Create_Ad_ConfigurationResponseFields": {
      "properties": {
        "inserted": {
          "type": "boolean",
          "description": "Whether the ad application was successfully inserted "
        }
      },
      "required": [
        "inserted"
      ]
    },
    "Create_Ad_ConfigurationError4xx": {
      "properties": {
        "BAD": {
          "type": "json",
          "description": "REQUEST 400: Invalid input value - see Live API Error Messages for more details "
        },
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Unauthorized - see Live API Error Messages for more details "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
        }
      },
      "required": [
        "BAD",
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND"
      ]
    },
    "beacon_set": {
      "properties": {
        "beacon_urls": {
          "type": "array",
          "description": "Array of beacon URLs ",
          "items": {
            "$ref": "#/definitions/beacon_set.beacon_urls"
          }
        }
      },
      "required": [
        "beacon_urls"
      ]
    },
    "beacon_set.beacon_urls": {
      "properties": {
        "beacon_url": {
          "type": "string",
          "description": "Beacon URL "
        },
        "beacon_type": {
          "type": "string",
          "description": "Beacon type "
        }
      },
      "required": [
        "beacon_url",
        "beacon_type"
      ]
    },
    "beacon_sets": {
      "properties": {
        "beacon_set_id": {
          "type": "string",
          "description": "Id for the beacon set "
        },
        "account_id": {
          "type": "string",
          "description": "Id for the account "
        }
      },
      "required": [
        "beacon_set_id",
        "account_id"
      ]
    },
    "Create_beacon_setResponseFields": {
      "properties": {
        "inserted": {
          "type": "boolean",
          "description": "Whether the beacon set was added successfully "
        }
      },
      "required": [
        "inserted"
      ]
    },
    "Create_beacon_setError4xx": {
      "properties": {
        "BAD": {
          "type": "json",
          "description": "REQUEST 400: Invalid input value - see Live API Error Messages for more details "
        },
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Unauthorized - see Live API Error Messages for more details "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
        }
      },
      "required": [
        "BAD",
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND"
      ]
    },
    "Delete_Ad_ConfigurationResponseFields": {
      "properties": {
        "TODO": {
          "type": "string",
          "description": ""
        }
      },
      "required": [
        "TODO"
      ]
    },
    "Delete_Ad_ConfigurationError4xx": {
      "properties": {
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Unauthorized - see Live API Error Messages for more details "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
        }
      },
      "required": [
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND"
      ]
    },
    "Delete_Ad_ConfigurationError5xx": {
      "properties": {
        "INTERNAL": {
          "type": "json",
          "description": "SERVER ERROR 500: DB getItem, no results found - see Live API Error Messages for more details "
        }
      },
      "required": [
        "INTERNAL"
      ]
    },
    "Get_Ad_ConfigurationResponseFields": {
      "properties": {
        "inserted": {
          "type": "boolean",
          "description": "Whether the ad application was successfully inserted "
        }
      },
      "required": [
        "inserted"
      ]
    },
    "Get_Ad_ConfigurationError4xx": {
      "properties": {
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Unauthorized - see Live API Error Messages for more details "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
        }
      },
      "required": [
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND"
      ]
    },
    "Get_Ad_ConfigurationError5xx": {
      "properties": {
        "INTERNAL": {
          "type": "json",
          "description": "SERVER ERROR 500: DB getItem, no results found - see Live API Error Messages for more details "
        }
      },
      "required": [
        "INTERNAL"
      ]
    },
    "Update_Ad_ConfigurationResponseFields": {
      "properties": {
        "inserted": {
          "type": "boolean",
          "description": "Whether the ad application was successfully inserted "
        }
      },
      "required": [
        "inserted"
      ]
    },
    "Update_Ad_ConfigurationError4xx": {
      "properties": {
        "BAD": {
          "type": "json",
          "description": "REQUEST 400: Invalid input value - see Live API Error Messages for more details "
        },
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Unauthorized - see Live API Error Messages for more details "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
        }
      },
      "required": [
        "BAD",
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND"
      ]
    },
    "Update_Ad_ConfigurationError5xx": {
      "properties": {
        "INTERNAL": {
          "type": "json",
          "description": "SERVER ERROR 500: DB getItem, no results found - see Live API Error Messages for more details "
        }
      },
      "required": [
        "INTERNAL"
      ]
    },
    "Delete_Slate_Media_Source_AssetResponseFields": {
      "properties": {
        "media_source_asset_id": {
          "type": "string",
          "description": "Id for the slate asset "
        },
        "account_id": {
          "type": "string",
          "description": "Id for the account "
        },
        "media_source_asset_default": {
          "type": "boolean",
          "description": "Whether this is the default media source asset "
        },
        "media_source_asset_type": {
          "type": "string",
          "description": "The media asset type "
        },
        "media_source_asset_url": {
          "type": "string",
          "description": "URL for the media asset to be ingested "
        },
        "media_source_asset_status": {
          "type": "string",
          "description": "Current status of the ingestion of the media asset "
        }
      },
      "required": [
        "media_source_asset_id",
        "account_id",
        "media_source_asset_default",
        "media_source_asset_type",
        "media_source_asset_url",
        "media_source_asset_status"
      ]
    },
    "Delete_Slate_Media_Source_AssetError4xx": {
      "properties": {
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Unauthorized - see Live API Error Messages for more details "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
        }
      },
      "required": [
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND"
      ]
    },
    "Delete_Slate_Media_Source_AssetError5xx": {
      "properties": {
        "INTERNAL": {
          "type": "json",
          "description": "SERVER ERROR 500: DB getItem, no results found - see Live API Error Messages for more details "
        }
      },
      "required": [
        "INTERNAL"
      ]
    },
    "Delete_beacon_setResponseFields": {
      "properties": {
        "beacon_set_id": {
          "type": "string",
          "description": "The beacon set id "
        },
        "deleted": {
          "type": "boolean",
          "description": "Whether the beacon set was deleted successfully "
        }
      },
      "required": [
        "beacon_set_id",
        "deleted"
      ]
    },
    "Delete_beacon_setError4xx": {
      "properties": {
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Unauthorized - see Live API Error Messages for more details "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
        }
      },
      "required": [
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND"
      ]
    },
    "Delete_beacon_setError5xx": {
      "properties": {
        "INTERNAL": {
          "type": "json",
          "description": "SERVER ERROR 500: DB getItem, no results found - see Live API Error Messages for more details "
        }
      },
      "required": [
        "INTERNAL"
      ]
    },
    "Update_beacon_setResponseFields": {
      "properties": {
        "inserted": {
          "type": "boolean",
          "description": "Whether the beacon set was added successfully "
        }
      },
      "required": [
        "inserted"
      ]
    },
    "Update_beacon_setError4xx": {
      "properties": {
        "BAD": {
          "type": "json",
          "description": "REQUEST 400: Invalid input value - see Live API Error Messages for more details "
        },
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Unauthorized - see Live API Error Messages for more details "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
        }
      },
      "required": [
        "BAD",
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND"
      ]
    },
    "Update_beacon_setError5xx": {
      "properties": {
        "INTERNAL": {
          "type": "json",
          "description": "SERVER ERROR 500: DB getItem, no results found - see Live API Error Messages for more details "
        }
      },
      "required": [
        "INTERNAL"
      ]
    },
    "Get_Account_Ad_ConfigurationsResponseFields": {
      "properties": {
        "inserted": {
          "type": "boolean",
          "description": "Whether the ad application was successfully inserted "
        }
      },
      "required": [
        "inserted"
      ]
    },
    "Get_Account_Ad_ConfigurationsError4xx": {
      "properties": {
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Unauthorized - see Live API Error Messages for more details "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
        }
      },
      "required": [
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND"
      ]
    },
    "Get_Account_Ad_ConfigurationsError5xx": {
      "properties": {
        "INTERNAL": {
          "type": "json",
          "description": "SERVER ERROR 500: DB getItem, no results found - see Live API Error Messages for more details "
        }
      },
      "required": [
        "INTERNAL"
      ]
    },
    "Get_Slate_Media_Source_AssetsResponseFields": {
      "properties": {
        "media_source_asset_id": {
          "type": "string",
          "description": "Id for the slate asset "
        },
        "account_id": {
          "type": "string",
          "description": "Id for the account "
        },
        "media_source_asset_description": {
          "type": "string",
          "description": "User identifiable description for the slate "
        },
        "media_source_asset_default": {
          "type": "boolean",
          "description": "Whether this is the default media source asset "
        },
        "media_source_asset_type": {
          "type": "string",
          "description": "The media asset type "
        },
        "media_source_asset_url": {
          "type": "string",
          "description": "URL for the media asset to be ingested "
        },
        "media_source_asset_status": {
          "type": "string",
          "description": "Current status of the ingestion of the media asset "
        }
      },
      "required": [
        "media_source_asset_id",
        "account_id",
        "media_source_asset_description",
        "media_source_asset_default",
        "media_source_asset_type",
        "media_source_asset_url",
        "media_source_asset_status"
      ]
    },
    "Get_Slate_Media_Source_AssetsError4xx": {
      "properties": {
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Unauthorized - see Live API Error Messages for more details "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
        }
      },
      "required": [
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND"
      ]
    },
    "Get_Slate_Media_Source_AssetsError5xx": {
      "properties": {
        "INTERNAL": {
          "type": "json",
          "description": "SERVER ERROR 500: DB getItem, no results found - see Live API Error Messages for more details "
        }
      },
      "required": [
        "INTERNAL"
      ]
    },
    "Get_beacon_setsResponseFields": {
      "properties": {
        "inserted": {
          "type": "boolean",
          "description": "Whether the beacon set was added successfully "
        }
      },
      "required": [
        "inserted"
      ]
    },
    "Get_beacon_setsError4xx": {
      "properties": {
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Unauthorized - see Live API Error Messages for more details "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
        }
      },
      "required": [
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND"
      ]
    },
    "Get_beacon_setsError5xx": {
      "properties": {
        "INTERNAL": {
          "type": "json",
          "description": "SERVER ERROR 500: DB getItem, no results found - see Live API Error Messages for more details "
        }
      },
      "required": [
        "INTERNAL"
      ]
    },
    "Get_beacon_sets_for_userResponseFields": {
      "properties": {
        "inserted": {
          "type": "boolean",
          "description": "Whether the beacon set was added successfully "
        }
      },
      "required": [
        "inserted"
      ]
    },
    "Get_beacon_sets_for_userError4xx": {
      "properties": {
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Unauthorized - see Live API Error Messages for more details "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
        }
      },
      "required": [
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND"
      ]
    },
    "Get_beacon_sets_for_userError5xx": {
      "properties": {
        "INTERNAL": {
          "type": "json",
          "description": "SERVER ERROR 500: DB getItem, no results found - see Live API Error Messages for more details "
        }
      },
      "required": [
        "INTERNAL"
      ]
    },
    "Ingest_Slate_Media_Source_AssetResponseFields": {
      "properties": {
        "media_source_asset_id": {
          "type": "string",
          "description": "Id for the slate asset "
        },
        "account_id": {
          "type": "string",
          "description": "Id for the account "
        },
        "media_source_asset_description": {
          "type": "string",
          "description": "User identifiable description for the slate "
        },
        "media_source_asset_default": {
          "type": "boolean",
          "description": "Whether this is the default media source asset "
        },
        "media_source_asset_type": {
          "type": "string",
          "description": "The media asset type "
        },
        "media_source_asset_url": {
          "type": "string",
          "description": "URL for the media asset to be ingested "
        },
        "media_source_asset_status": {
          "type": "string",
          "description": "Current status of the ingestion of the media asset "
        }
      },
      "required": [
        "media_source_asset_id",
        "account_id",
        "media_source_asset_description",
        "media_source_asset_default",
        "media_source_asset_type",
        "media_source_asset_url",
        "media_source_asset_status"
      ]
    },
    "Ingest_Slate_Media_Source_AssetError4xx": {
      "properties": {
        "BAD": {
          "type": "json",
          "description": "REQUEST 400: Invalid input value - see Live API Error Messages for more details "
        },
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Unauthorized - see Live API Error Messages for more details "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested - see Live API Error Messages for more details "
        }
      },
      "required": [
        "BAD",
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND"
      ]
    }
  },
  "schemes": [
    "https"
  ],
  "basePath": "api.bcovlive.io"
}