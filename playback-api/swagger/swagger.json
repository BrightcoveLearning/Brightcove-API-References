{
  "swagger": "2.0",
  "info": {
    "title": "Playback API Reference",
    "version": "1.0.0",
    "description": "Reference for the Brightcove Playback API, used for client-side access video and playlist information.<br><br><strong>Notes:</strong><ul><li>Customers using IP Restriction <strong>must</strong> use <code>https://edge-elb.api.brightcove.com/playback/v1</code> instead of the standard URL (Use <code>edge-elb.api...</code> vs the normal <code>edge.api...</code>). To learn how to restrict playback for all the players in an account, see the <a href=\"https://support.brightcove.com/node/8065\">Restricting Video Playback Using IP Address</a> document.<br><br></li><li>The raw API JSON response is not suitable with the player. Use the <code>player.catalog.transformVideoResponse()</code> function to convert each video object in the response into a format compatible with the player. This includes duration times and https image compatibility. For details, see the <a href=\"https://support.brightcove.com/node/18108\">Player Catalog</a> document.</li></ul>"
  },
  "paths": {
    "": {
      "": {
        "tags": [
          "_Users_rcrooks_git_Brightcove_API_References_playback_api_v1_doc_main_js"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "Success 200": {
            "description": "Success 200"
          }
        },
        "operationId": ""
      }
    },
    "/accounts/{account_id}/playlists/{playlist_id}": {
      "get": {
        "tags": [
          "playlistGroup"
        ],
        "summary": "Get Playlist by ID or Reference ID",
        "description": "Gets a playlist object for an account, based on playlist ID or reference ID.   ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Video Cloud account ID "
          },
          {
            "name": "playlist_id",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "Video Cloud playlist ID "
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            "description": "The number of videos to return "
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "number",
            "description": "The number of videos to skip "
          },
          {
            "name": "ad_config_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "include server-side ad insertion "
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": application/json;pk=policy_key (there are 3 ways to authenticate &mdash; use one of these three headers) See Policy API Overview or Policy Keys for information on getting policy keys "
          }
        ],
        "responses": {
          "Response Field": {
            "description": "Response Field",
            "schema": {
              "$ref": "#/definitions/Get_Playlists_by_ID_or_Reference_IDResponseField"
            }
          },
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/videos"
            }
          },
          "Error 400": {
            "description": "Error 400",
            "schema": {
              "$ref": "#/definitions/Get_Playlists_by_ID_or_Reference_IDError400"
            }
          },
          "Error 401": {
            "description": "Error 401",
            "schema": {
              "$ref": "#/definitions/Get_Playlists_by_ID_or_Reference_IDError401"
            }
          },
          "Error 403": {
            "description": "Error 403",
            "schema": {
              "$ref": "#/definitions/Get_Playlists_by_ID_or_Reference_IDError403"
            }
          },
          "Error 404": {
            "description": "Error 404",
            "schema": {
              "$ref": "#/definitions/Get_Playlists_by_ID_or_Reference_IDError404"
            }
          },
          "Error 405": {
            "description": "Error 405",
            "schema": {
              "$ref": "#/definitions/Get_Playlists_by_ID_or_Reference_IDError405"
            }
          },
          "Error 500": {
            "description": "Error 500",
            "schema": {
              "$ref": "#/definitions/Get_Playlists_by_ID_or_Reference_IDError500"
            }
          },
          "Error 502": {
            "description": "Error 502",
            "schema": {
              "$ref": "#/definitions/Get_Playlists_by_ID_or_Reference_IDError502"
            }
          },
          "Error 503": {
            "description": "Error 503",
            "schema": {
              "$ref": "#/definitions/Get_Playlists_by_ID_or_Reference_IDError503"
            }
          },
          "Error 504": {
            "description": "Error 504",
            "schema": {
              "$ref": "#/definitions/Get_Playlists_by_ID_or_Reference_IDError504"
            }
          }
        },
        "operationId": "Get_Playlists_by_ID_or_Reference_ID"
      }
    },
    "/accounts/{account_id}/videos/{video_id}/related": {
      "get": {
        "tags": [
          "videoGroup"
        ],
        "summary": "Get Related Videos by ID or Reference ID",
        "description": "Gets a page of video objects that are related to the specified video. Using the name and short description of the specified video, the Playback API searches for videos with any partial matches in the following fields: name, short description, long description, tags.        Notes:  When performing this search, you need to use a search-enabled Policy Key. For information on getting policy keys, see the Policy API Overview or the Policy Keys documents.  In general, search-enabled Policy Keys should only be stored on a server and not in a browser player or mobile app, since they can be used to list all playable videos. For some accounts this may not be applicable if you do not care if all of your playable videos can be discovered.  The response results for this endpoint are subject to change as we improve the algorithm for finding related videos. If you do not want your results to change, or if you want precise control, then you should use the Get Videos endpoint with a search parameter.  Any geo-restricted videos that are denied for the particular requestor are omitted from the results. As long as some videos are allowed the request is considered successful. An errors field is added to the result with a summary explaining why videos were omitted.    ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Video Cloud account ID "
          },
          {
            "name": "video_id",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "Video Cloud video ID "
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            "description": "number of videos to return "
          },
          {
            "name": "ad_config_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "include server-side ad insertion "
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": application/json;pk=policy_key (there are 3 ways to authenticate &mdash; use one of these three headers). You need to use a search-enabled Policy Key. "
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": BCOV-Policy {policy_key} (there are 3 ways to authenticate &mdash; use one of these three headers). You need to use a search-enabled Policy Key. "
          },
          {
            "name": "BCOV-Policy",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {policy_key} (there are 3 ways to authenticate &mdash; use one of these three headers). You need to use a search-enabled Policy Key. "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Get_Related_Videos_by_ID_or_Reference_IDResponseFields"
            }
          },
          "Error 400": {
            "description": "Error 400",
            "schema": {
              "$ref": "#/definitions/Get_Related_Videos_by_ID_or_Reference_IDError400"
            }
          },
          "Error 401": {
            "description": "Error 401",
            "schema": {
              "$ref": "#/definitions/Get_Related_Videos_by_ID_or_Reference_IDError401"
            }
          },
          "Error 403": {
            "description": "Error 403",
            "schema": {
              "$ref": "#/definitions/Get_Related_Videos_by_ID_or_Reference_IDError403"
            }
          },
          "Error 404": {
            "description": "Error 404",
            "schema": {
              "$ref": "#/definitions/Get_Related_Videos_by_ID_or_Reference_IDError404"
            }
          },
          "Error 405": {
            "description": "Error 405",
            "schema": {
              "$ref": "#/definitions/Get_Related_Videos_by_ID_or_Reference_IDError405"
            }
          },
          "Error 500": {
            "description": "Error 500",
            "schema": {
              "$ref": "#/definitions/Get_Related_Videos_by_ID_or_Reference_IDError500"
            }
          },
          "Error 502": {
            "description": "Error 502",
            "schema": {
              "$ref": "#/definitions/Get_Related_Videos_by_ID_or_Reference_IDError502"
            }
          },
          "Error 503": {
            "description": "Error 503",
            "schema": {
              "$ref": "#/definitions/Get_Related_Videos_by_ID_or_Reference_IDError503"
            }
          },
          "Error 504": {
            "description": "Error 504",
            "schema": {
              "$ref": "#/definitions/Get_Related_Videos_by_ID_or_Reference_IDError504"
            }
          }
        },
        "operationId": "Get_Related_Videos_by_ID_or_Reference_ID"
      }
    },
    "/accounts/{account_id}/videos/{video_id}": {
      "get": {
        "tags": [
          "videoGroup"
        ],
        "summary": "Get Video by ID or Reference ID",
        "description": "Gets a video object based on a video ID or reference ID.   ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Video Cloud account ID "
          },
          {
            "name": "video_id",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "Video Cloud video ID "
          },
          {
            "name": "ad_config_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "include server-side ad insertion "
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": application/json;pk=policy_key (there are 3 ways to authenticate &mdash; use one of these three headers) See Policy API Overview or Policy Keys for information on getting policy keys "
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": BCOV-Policy {policy_key} (there are 3 ways to authenticate &mdash; use one of these three headers) See Policy API Overview or Policy Keys for information on getting policy keys "
          },
          {
            "name": "BCOV-Policy",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {policy_key} (there are 3 ways to authenticate &mdash; use one of these three headers) See Policy API Overview or Policy Keys for information on getting policy keys "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Get_Video_by_ID_or_Reference_IDResponseFields"
            }
          },
          "Error 400": {
            "description": "Error 400",
            "schema": {
              "$ref": "#/definitions/Get_Video_by_ID_or_Reference_IDError400"
            }
          },
          "Error 401": {
            "description": "Error 401",
            "schema": {
              "$ref": "#/definitions/Get_Video_by_ID_or_Reference_IDError401"
            }
          },
          "Error 403": {
            "description": "Error 403",
            "schema": {
              "$ref": "#/definitions/Get_Video_by_ID_or_Reference_IDError403"
            }
          },
          "Error 404": {
            "description": "Error 404",
            "schema": {
              "$ref": "#/definitions/Get_Video_by_ID_or_Reference_IDError404"
            }
          },
          "Error 405": {
            "description": "Error 405",
            "schema": {
              "$ref": "#/definitions/Get_Video_by_ID_or_Reference_IDError405"
            }
          },
          "Error 500": {
            "description": "Error 500",
            "schema": {
              "$ref": "#/definitions/Get_Video_by_ID_or_Reference_IDError500"
            }
          },
          "Error 502": {
            "description": "Error 502",
            "schema": {
              "$ref": "#/definitions/Get_Video_by_ID_or_Reference_IDError502"
            }
          },
          "Error 503": {
            "description": "Error 503",
            "schema": {
              "$ref": "#/definitions/Get_Video_by_ID_or_Reference_IDError503"
            }
          },
          "Error 504": {
            "description": "Error 504",
            "schema": {
              "$ref": "#/definitions/Get_Video_by_ID_or_Reference_IDError504"
            }
          }
        },
        "operationId": "Get_Video_by_ID_or_Reference_ID"
      }
    },
    "/accounts/{account_id}/videos": {
      "get": {
        "tags": [
          "videoGroup"
        ],
        "summary": "Get Videos",
        "description": "Gets a page of video objects. The Playback API allows you to programmatically search for videos in your Video Cloud library. To use the search functionality, you must include a search-enabled Policy Key.      Notes:  When performing a search, you need to use a search-enabled Policy Key. For information on getting policy keys, see the Policy API Overview or the Policy Keys documents.  In general, search-enabled Policy Keys should only be stored on a server and not in a browser player or mobile app, since they can be used to list all playable videos. For some accounts this may not be applicable if you do not care if all of your playable videos can be discovered.  The maximum number of videos (highest count value) returned is 1000, even if there are more matching videos in the account. The count value is an estimate and should not be relied on as the exact number to be returned. If all results are desired then keep paging until it no longer returns a full page, or use the CMS api.  Only currently playable videos are included in the results list. It is recommended to do a similar query with the CMS api to see why some videos are excluded.  Any geo-restricted videos that are denied for the particular requestor are omitted from the results. As long as some videos are allowed the request is considered successful. An errors field is added to the result with a summary explaining why videos were omitted.    ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Video Cloud account ID "
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "number",
            "description": "number of videos to return "
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "number",
            "description": "number of videos to skip in the response "
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "search string - see search guide for details "
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "field to sort results by; if absent and there is a search string, results are sorted by relevance &mdash; note that plays_total and plays_trailing_week are not included in the response - note: to sort in descending order, preface the sort field name with a minus (-) sign "
          },
          {
            "name": "ad_config_id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "include server-side ad insertion "
          },
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": application/json;pk=policy_key (there are 3 ways to authenticate &mdash; use one of these three headers). You need to use a search-enabled Policy Key. "
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": BCOV-Policy {policy_key} (there are 3 ways to authenticate &mdash; use one of these three headers). You need to use a search-enabled Policy Key. "
          },
          {
            "name": "BCOV-Policy",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {policy_key} (there are 3 ways to authenticate &mdash; use one of these three headers). You need to use a search-enabled Policy Key. "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Get_VideosResponseFields"
            }
          },
          "Error 400": {
            "description": "Error 400",
            "schema": {
              "$ref": "#/definitions/Get_VideosError400"
            }
          },
          "Error 401": {
            "description": "Error 401",
            "schema": {
              "$ref": "#/definitions/Get_VideosError401"
            }
          },
          "Error 403": {
            "description": "Error 403",
            "schema": {
              "$ref": "#/definitions/Get_VideosError403"
            }
          },
          "Error 404": {
            "description": "Error 404",
            "schema": {
              "$ref": "#/definitions/Get_VideosError404"
            }
          },
          "Error 405": {
            "description": "Error 405",
            "schema": {
              "$ref": "#/definitions/Get_VideosError405"
            }
          },
          "Error 500": {
            "description": "Error 500",
            "schema": {
              "$ref": "#/definitions/Get_VideosError500"
            }
          },
          "Error 502": {
            "description": "Error 502",
            "schema": {
              "$ref": "#/definitions/Get_VideosError502"
            }
          },
          "Error 503": {
            "description": "Error 503",
            "schema": {
              "$ref": "#/definitions/Get_VideosError503"
            }
          },
          "Error 504": {
            "description": "Error 504",
            "schema": {
              "$ref": "#/definitions/Get_VideosError504"
            }
          }
        },
        "operationId": "Get_Videos"
      }
    }
  },
  "definitions": {
    "Get_Playlists_by_ID_or_Reference_IDResponseField": {
      "properties": {
        "account_id": {
          "type": "string",
          "description": "Video Cloud account id "
        },
        "created_at": {
          "type": "datestring",
          "description": "date/time created "
        },
        "description": {
          "type": "string",
          "description": "playlist description "
        },
        "id": {
          "type": "string",
          "description": "the playlist id "
        },
        "name": {
          "type": "string",
          "description": "the playlist name "
        },
        "reference_id": {
          "type": "string",
          "description": "the playlist reference id "
        },
        "type": {
          "type": "string",
          "description": "the playlist type: EXPLICIT or smart playlist type "
        },
        "updated_at": {
          "type": "datestring",
          "description": "date/time last modified "
        },
        "video_ids": {
          "type": "array",
          "description": "array of video ids (EXPLICIT playlists only) ",
          "items": {
            "type": "string"
          }
        },
        "search": {
          "type": "string",
          "description": "search string to retrieve the videos (smart playlists only) "
        }
      },
      "required": [
        "account_id",
        "created_at",
        "description",
        "id",
        "name",
        "reference_id",
        "type",
        "updated_at",
        "video_ids",
        "search"
      ]
    },
    "videos": {
      "properties": {
        "id": {
          "type": "string",
          "description": "video id "
        },
        "name": {
          "type": "string",
          "description": "video title "
        },
        "created_at": {
          "type": "datestring",
          "description": "when the video was created "
        },
        "custom_fields": {
          "type": "object",
          "description": "map of fieldname-value pairs ",
          "$ref": "#/definitions/videos.custom_fields"
        },
        "cue_points": {
          "type": "object",
          "description": "array of cue point maps ",
          "$ref": "#/definitions/videos.cue_points"
        },
        "description": {
          "type": "string",
          "description": "video short description "
        },
        "duration": {
          "type": "number",
          "description": "video duration in milliseconds "
        },
        "economics": {
          "type": "string",
          "description": "whether video is AD_SUPPORTED "
        },
        "poster_sources": {
          "type": "array",
          "description": "array of poster source maps (note that in many cases there will be one source with a src value identical to the poster value, but this array is included in case there are multiple protocols available, such as http and https) ",
          "items": {
            "$ref": "#/definitions/videos.poster_sources"
          }
        },
        "poster": {
          "type": "string",
          "description": "URL for the default poster source image "
        },
        "projection": {
          "type": "string",
          "description": "The mapping projection for 360° videos, e.g. &quot;equirectangular&quot; "
        },
        "thumbnail_sources": {
          "type": "array",
          "description": "array of thumbnail source maps (note that in many cases there will be one source with a src value identical to the thumbnail value, but this array is included in case there are multiple protocols available, such as http and https) ",
          "items": {
            "$ref": "#/definitions/videos.thumbnail_sources"
          }
        },
        "thumbnail": {
          "type": "string",
          "description": "URL for the default thumbnail source image "
        },
        "link": {
          "type": "object",
          "description": "map of scheduling properties ",
          "$ref": "#/definitions/videos.link"
        },
        "long_description": {
          "type": "string",
          "description": "video long description "
        },
        "offline_enabled": {
          "type": "boolean",
          "description": "whether video is enabled for offline viewing "
        },
        "reference_id": {
          "type": "string",
          "description": "video reference-id (must be unique within the account) "
        },
        "tags": {
          "type": "array",
          "description": "array of tags ",
          "items": {
            "type": "string"
          }
        },
        "sources": {
          "type": "array",
          "description": "array of video sources (renditions) ",
          "items": {
            "$ref": "#/definitions/videos.sources"
          }
        },
        "text_tracks": {
          "type": "object",
          "description": "array of text track maps ",
          "$ref": "#/definitions/videos.text_tracks"
        },
        "updated_at": {
          "type": "datestring",
          "description": "when the video was last modified "
        },
        "ad_keys": {
          "type": "object",
          "description": "map of key/value pairs for ad requests ",
          "$ref": "#/definitions/videos.ad_keys"
        }
      },
      "required": [
        "id",
        "name",
        "created_at",
        "custom_fields",
        "cue_points",
        "description",
        "duration",
        "economics",
        "poster_sources",
        "poster",
        "projection",
        "thumbnail_sources",
        "thumbnail",
        "link",
        "long_description",
        "offline_enabled",
        "reference_id",
        "tags",
        "sources",
        "text_tracks",
        "updated_at",
        "ad_keys"
      ]
    },
    "videos.cue_points": {
      "properties": {
        "name": {
          "type": "string",
          "description": "cue point name "
        },
        "type": {
          "type": "string",
          "description": "cue point type "
        },
        "time": {
          "type": "number",
          "description": "time of the cue point in seconds; example: 10.527 "
        },
        "metadata": {
          "type": "string",
          "description": "optional metadata string (128 single-byte characters maximum) "
        },
        "force-stop": {
          "type": "boolean",
          "description": "whether video is force-stopped at the cue point "
        }
      },
      "required": [
        "name",
        "type",
        "time",
        "metadata",
        "force-stop"
      ]
    },
    "videos.poster_sources": {
      "properties": {
        "src": {
          "type": "string",
          "description": "URL for a poster source image (note that in many cases there will be one source with a src value identical to the poster value, but this array is included in case there are multiple protocols available, such as http and https) "
        }
      },
      "required": [
        "src"
      ]
    },
    "videos.thumbnail_sources": {
      "properties": {
        "src": {
          "type": "string",
          "description": "URL for a thumbnail source image (note that in many cases there will be one source with a src value identical to the thumbnail value, but this array is included in case there are multiple protocols available, such as http and https) "
        }
      },
      "required": [
        "src"
      ]
    },
    "videos.link": {
      "properties": {
        "text": {
          "type": "string",
          "description": "text for the link "
        },
        "url": {
          "type": "string",
          "description": "URL for the link "
        }
      },
      "required": [
        "text",
        "url"
      ]
    },
    "videos.sources": {
      "properties": {
        "avg_bitrate": {
          "type": "number",
          "description": "average bitrate "
        },
        "width": {
          "type": "number",
          "description": "frame width in pixels "
        },
        "height": {
          "type": "number",
          "description": "frame height in pixels "
        },
        "size": {
          "type": "number",
          "description": "size in bytes "
        },
        "duration": {
          "type": "number",
          "description": "duration in milliseconds "
        },
        "asset_id": {
          "type": "string",
          "description": "the asset id for the source "
        },
        "stream_name": {
          "type": "string",
          "description": "the stream name for the source "
        },
        "codec": {
          "type": "string",
          "description": "the video codec "
        },
        "container": {
          "type": "string",
          "description": "the video container "
        },
        "app_name": {
          "type": "string",
          "description": "the address for rtmp streams "
        },
        "type": {
          "type": "string",
          "description": "the type (for HLS streams) "
        }
      },
      "required": [
        "avg_bitrate",
        "width",
        "height",
        "size",
        "duration",
        "asset_id",
        "stream_name",
        "codec",
        "container",
        "app_name",
        "type"
      ]
    },
    "videos.text_tracks": {
      "properties": {
        "src": {
          "type": "string",
          "description": "URL for the .vtt file "
        },
        "sources": {
          "type": "array",
          "description": "array of sources for .vtt files (note that in many cases there will be one source with a src value identical to the text_tracks.src value, but this array is included in case there are multiple protocols available, such as http and https) ",
          "items": {
            "$ref": "#/definitions/videos.text_tracks.sources"
          }
        },
        "kind": {
          "type": "string",
          "description": "kind of text track "
        },
        "srclang": {
          "type": "string",
          "description": "2-letter language code, such as &quot;en&quot; or &quot;ko&quot; "
        },
        "mime_type": {
          "type": "string",
          "description": "mime_type for the track "
        },
        "label": {
          "type": "string",
          "description": "label for the track "
        },
        "default": {
          "type": "boolean",
          "description": "whether this is the default track "
        },
        "in_band_metadata_track_dispatch_type": {
          "type": "string",
          "description": "If this field is present, it means that references for this text track are available in the associated video&#39;s manifest "
        }
      },
      "required": [
        "src",
        "sources",
        "kind",
        "srclang",
        "mime_type",
        "label",
        "default",
        "in_band_metadata_track_dispatch_type"
      ]
    },
    "videos.text_tracks.sources": {
      "properties": {
        "src": {
          "type": "string",
          "description": "URL for the .vtt file (note that in many cases there will be one source with a src value identical to the text_tracks.src value, but this array is included in case there are multiple protocols available, such as http and https) "
        }
      },
      "required": [
        "src"
      ]
    },
    "Get_Playlists_by_ID_or_Reference_IDError400": {
      "properties": {
        "BAD_REQUEST": {
          "type": "",
          "description": "error_subcode:  DUPLICATE_PARAMETERS - The same parameter name was provided more than once in the request "
        }
      },
      "required": [
        "BAD_REQUEST"
      ]
    },
    "Get_Playlists_by_ID_or_Reference_IDError401": {
      "properties": {
        "INVALID_POLICY_KEY": {
          "type": "",
          "description": "Must be a legal policy key in an appropriate header. "
        }
      },
      "required": [
        "INVALID_POLICY_KEY"
      ]
    },
    "Get_Playlists_by_ID_or_Reference_IDError403": {
      "properties": {
        "ACCESS_DENIED": {
          "type": "",
          "description": "error_subcodes:  ACCOUNT_ID  - The account id in the policy key does not match the account in the api request  DOMAIN - The video is restricted from playing on the current domain  CLIENT_GEO - The video is restricted from playing in the current geo region; the message will contain additional information about the specific issue. For more details, see the Playback API Error Reference  CLIENT_IP - The video is restricted at the current IP address  POLICY_ERROR - Error when evaluating the policy key "
        }
      },
      "required": [
        "ACCESS_DENIED"
      ]
    },
    "Get_Playlists_by_ID_or_Reference_IDError404": {
      "properties": {
        "NOT_FOUND": {
          "type": "",
          "description": "error_subcode:  PLAYLIST_NOT_FOUND - The requested resource is not available. "
        }
      },
      "required": [
        "NOT_FOUND"
      ]
    },
    "Get_Playlists_by_ID_or_Reference_IDError405": {
      "properties": {
        "METHOD_NOT_ALLOWED": {
          "type": "",
          "description": "Only GET, HEAD and OPTIONS are allowed for this api. "
        }
      },
      "required": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "Get_Playlists_by_ID_or_Reference_IDError500": {
      "properties": {
        "SERVER_ERROR": {
          "type": "",
          "description": "Internal server error. "
        }
      },
      "required": [
        "SERVER_ERROR"
      ]
    },
    "Get_Playlists_by_ID_or_Reference_IDError502": {
      "properties": {
        "SERVER_ERROR": {
          "type": "",
          "description": "Got a bad response from a backend server.  Various *_RETRIEVE_FAILURE error codes: ACCOUNT_RETRIEVE_FAILURE, PLAYLIST_RETRIEVE_FAILURE, PLAYLIST_VIDEOS_RETRIEVE_FAILURE. "
        }
      },
      "required": [
        "SERVER_ERROR"
      ]
    },
    "Get_Playlists_by_ID_or_Reference_IDError503": {
      "properties": {
        "SERVICE_UNAVAILABLE": {
          "type": "",
          "description": "Returned this response from a backend server. "
        }
      },
      "required": [
        "SERVICE_UNAVAILABLE"
      ]
    },
    "Get_Playlists_by_ID_or_Reference_IDError504": {
      "properties": {
        "SERVER_TIMEOUT": {
          "type": "",
          "description": "Either a backend server or one of the servers they rely on timed out. "
        }
      },
      "required": [
        "SERVER_TIMEOUT"
      ]
    },
    "Get_Related_Videos_by_ID_or_Reference_IDResponseFields": {
      "properties": {
        "account_id": {
          "type": "string",
          "description": "Video Cloud account id "
        },
        "id": {
          "type": "string",
          "description": "video id "
        },
        "name": {
          "type": "string",
          "description": "video title "
        },
        "created_at": {
          "type": "datestring",
          "description": "when the video was created "
        },
        "custom_fields": {
          "type": "object",
          "description": "map of fieldname-value pairs ",
          "$ref": "#/definitions/custom_fields"
        },
        "cue_points": {
          "type": "object",
          "description": "array of cue point maps ",
          "$ref": "#/definitions/cue_points"
        },
        "description": {
          "type": "string",
          "description": "video short description "
        },
        "duration": {
          "type": "number",
          "description": "video duration in milliseconds "
        },
        "economics": {
          "type": "string",
          "description": "whether video is AD_SUPPORTED "
        },
        "poster_sources": {
          "type": "array",
          "description": "array of poster source maps (note that in many cases there will be one source with a src value identical to the poster value, but this array is included in case there are multiple protocols available, such as http and https) ",
          "items": {
            "$ref": "#/definitions/poster_sources"
          }
        },
        "poster": {
          "type": "string",
          "description": "URL for the default poster source image "
        },
        "projection": {
          "type": "string",
          "description": "The mapping projection for 360° videos, e.g. &quot;equirectangular&quot; "
        },
        "thumbnail_sources": {
          "type": "array",
          "description": "array of thumbnail source maps (note that in many cases there will be one source with a src value identical to the thumbnail value, but this array is included in case there are multiple protocols available, such as http and https) ",
          "items": {
            "$ref": "#/definitions/thumbnail_sources"
          }
        },
        "thumbnail": {
          "type": "string",
          "description": "URL for the default thumbnail source image "
        },
        "link": {
          "type": "object",
          "description": "map of scheduling properties ",
          "$ref": "#/definitions/link"
        },
        "long_description": {
          "type": "string",
          "description": "video long description "
        },
        "offline_enabled": {
          "type": "boolean",
          "description": "whether video is enabled for offline viewing "
        },
        "reference_id": {
          "type": "string",
          "description": "video reference-id (must be unique within the account) "
        },
        "tags": {
          "type": "array",
          "description": "array of tags ",
          "items": {
            "type": "string"
          }
        },
        "sources": {
          "type": "array",
          "description": "array of video sources (renditions) ",
          "items": {
            "$ref": "#/definitions/sources"
          }
        },
        "text_tracks": {
          "type": "object",
          "description": "array of text track maps ",
          "$ref": "#/definitions/text_tracks"
        },
        "updated_at": {
          "type": "datestring",
          "description": "when the video was last modified "
        },
        "ad_keys": {
          "type": "object",
          "description": "map of key/value pairs for ad requests ",
          "$ref": "#/definitions/ad_keys"
        }
      },
      "required": [
        "account_id",
        "id",
        "name",
        "created_at",
        "custom_fields",
        "cue_points",
        "description",
        "duration",
        "economics",
        "poster_sources",
        "poster",
        "projection",
        "thumbnail_sources",
        "thumbnail",
        "link",
        "long_description",
        "offline_enabled",
        "reference_id",
        "tags",
        "sources",
        "text_tracks",
        "updated_at",
        "ad_keys"
      ]
    },
    "cue_points": {
      "properties": {
        "name": {
          "type": "string",
          "description": "cue point name "
        },
        "type": {
          "type": "string",
          "description": "cue point type "
        },
        "time": {
          "type": "number",
          "description": "time of the cue point in seconds; example: 10.527 "
        },
        "metadata": {
          "type": "string",
          "description": "optional metadata string (128 single-byte characters maximum) "
        },
        "force-stop": {
          "type": "boolean",
          "description": "whether video is force-stopped at the cue point "
        }
      },
      "required": [
        "name",
        "type",
        "time",
        "metadata",
        "force-stop"
      ]
    },
    "poster_sources": {
      "properties": {
        "src": {
          "type": "string",
          "description": "URL for a poster source image (note that in many cases there will be one source with a src value identical to the poster value, but this array is included in case there are multiple protocols available, such as http and https) "
        }
      },
      "required": [
        "src"
      ]
    },
    "thumbnail_sources": {
      "properties": {
        "src": {
          "type": "string",
          "description": "URL for a thumbnail source image (note that in many cases there will be one source with a src value identical to the thumbnail value, but this array is included in case there are multiple protocols available, such as http and https)   image "
        }
      },
      "required": [
        "src"
      ]
    },
    "link": {
      "properties": {
        "text": {
          "type": "string",
          "description": "text for the link "
        },
        "url": {
          "type": "string",
          "description": "URL for the link "
        }
      },
      "required": [
        "text",
        "url"
      ]
    },
    "sources": {
      "properties": {
        "avg_bitrate": {
          "type": "number",
          "description": "average bitrate "
        },
        "width": {
          "type": "number",
          "description": "frame width in pixels "
        },
        "height": {
          "type": "number",
          "description": "frame height in pixels "
        },
        "size": {
          "type": "number",
          "description": "size in bytes "
        },
        "duration": {
          "type": "number",
          "description": "duration in milliseconds "
        },
        "asset_id": {
          "type": "string",
          "description": "the asset id for the source "
        },
        "stream_name": {
          "type": "string",
          "description": "the stream name for the source "
        },
        "codec": {
          "type": "string",
          "description": "the video codec "
        },
        "container": {
          "type": "string",
          "description": "the video container "
        },
        "app_name": {
          "type": "string",
          "description": "the address for rtmp streams "
        },
        "type": {
          "type": "string",
          "description": "the type (for HLS streams) "
        },
        "key_systems": {
          "type": "object",
          "description": "a list of objects where each defines the type of encryption used for a DRM packaged source – if this object is defined, then its source is content protected ",
          "$ref": "#/definitions/sources.key_systems"
        }
      },
      "required": [
        "avg_bitrate",
        "width",
        "height",
        "size",
        "duration",
        "asset_id",
        "stream_name",
        "codec",
        "container",
        "app_name",
        "type",
        "key_systems"
      ]
    },
    "text_tracks": {
      "properties": {
        "src": {
          "type": "string",
          "description": "URL for the .vtt file "
        },
        "sources": {
          "type": "array",
          "description": "array of sources for .vtt files (note that in many cases there will be one source with a src value identical to the text_tracks.src value, but this array is included in case there are multiple protocols available, such as http and https) ",
          "items": {
            "$ref": "#/definitions/text_tracks.sources"
          }
        },
        "kind": {
          "type": "string",
          "description": "kind of text track "
        },
        "srclang": {
          "type": "string",
          "description": "2-letter language code, such as &quot;en&quot; or &quot;ko&quot; "
        },
        "mime_type": {
          "type": "string",
          "description": "mime_type for the track "
        },
        "label": {
          "type": "string",
          "description": "label for the track "
        },
        "default": {
          "type": "boolean",
          "description": "whether this is the default track "
        },
        "in_band_metadata_track_dispatch_type": {
          "type": "string",
          "description": "If this field is present, it means that references for this text track are available in the associated video&#39;s manifest "
        }
      },
      "required": [
        "src",
        "sources",
        "kind",
        "srclang",
        "mime_type",
        "label",
        "default",
        "in_band_metadata_track_dispatch_type"
      ]
    },
    "text_tracks.sources": {
      "properties": {
        "src": {
          "type": "string",
          "description": "URL for the .vtt file (note that in many cases there will be one source with a src value identical to the text_tracks.src value, but this array is included in case there are multiple protocols available, such as http and https) "
        }
      },
      "required": [
        "src"
      ]
    },
    "Get_Related_Videos_by_ID_or_Reference_IDError400": {
      "properties": {
        "BAD_REQUEST": {
          "type": "json",
          "description": "error_subcode:    DUPLICATE_PARAMETERS - The same parameter name was provided more than once in the request    INVALID_SEARCH - The search parameters are not valid    ILLEGAL_QUERY - The search string syntax was invalid - example: 1) doing a tags search that ends with a comma or has an unclosed quote    INVALID_SORT - The sort parameters specified an invalid field "
        }
      },
      "required": [
        "BAD_REQUEST"
      ]
    },
    "Get_Related_Videos_by_ID_or_Reference_IDError401": {
      "properties": {
        "INVALID_POLICY_KEY": {
          "type": "json",
          "description": "Must be a legal policy key in an appropriate header. "
        }
      },
      "required": [
        "INVALID_POLICY_KEY"
      ]
    },
    "Get_Related_Videos_by_ID_or_Reference_IDError403": {
      "properties": {
        "ACCESS_DENIED": {
          "type": "json",
          "description": "error_subcode:    ACCOUNT_ID  - The account id in the policy key does not match the account in the api request    API  - The policy key is not search-enabled when attempting to perform a search    CLIENT_GEO - The video is restricted from playing in the current geo region; the message will contain additional information about the specific issue. For more details, see the Playback API Error Reference    CLIENT_IP - The video is restricted at the current IP address    DOMAIN - The video is restricted from playing on the current domain    POLICY_ERROR - Error when evaluating the policy key "
        },
        "FORBIDDEN": {
          "type": "json",
          "description": "error_subcode:    VIDEO_NOT_PLAYABLE - For a single video request, the video exists, but is not allowed to be played now. That could be any of the four reasons that videos are not playable: not sufficiently ingested, has no sources, not active, not in scheduled date range. "
        }
      },
      "required": [
        "ACCESS_DENIED",
        "FORBIDDEN"
      ]
    },
    "Get_Related_Videos_by_ID_or_Reference_IDError404": {
      "properties": {
        "NOT_FOUND": {
          "type": "json",
          "description": "error_subcode:    VIDEO_NOT_FOUND - The requested resource is not available. "
        }
      },
      "required": [
        "NOT_FOUND"
      ]
    },
    "Get_Related_Videos_by_ID_or_Reference_IDError405": {
      "properties": {
        "METHOD_NOT_ALLOWED": {
          "type": "json",
          "description": "Only GET, HEAD and OPTIONS are allowed for this api. "
        }
      },
      "required": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "Get_Related_Videos_by_ID_or_Reference_IDError500": {
      "properties": {
        "SERVER_ERROR": {
          "type": "json",
          "description": "Internal server error. "
        }
      },
      "required": [
        "SERVER_ERROR"
      ]
    },
    "Get_Related_Videos_by_ID_or_Reference_IDError502": {
      "properties": {
        "SERVER_ERROR": {
          "type": "json",
          "description": "Got a bad response from a backend server.    Various *_RETRIEVE_FAILURE error codes: ACCOUNT_RETRIEVE_FAILURE, VIDEO_RETRIEVE_FAILURE, VIDEO_URLS_RETRIEVE_FAILURE. "
        }
      },
      "required": [
        "SERVER_ERROR"
      ]
    },
    "Get_Related_Videos_by_ID_or_Reference_IDError503": {
      "properties": {
        "SERVICE_UNAVAILABLE": {
          "type": "json",
          "description": "Returned this response from a backend server. "
        }
      },
      "required": [
        "SERVICE_UNAVAILABLE"
      ]
    },
    "Get_Related_Videos_by_ID_or_Reference_IDError504": {
      "properties": {
        "SERVER_TIMEOUT": {
          "type": "json",
          "description": "Either a backend server or one of the servers they rely on timed out. "
        }
      },
      "required": [
        "SERVER_TIMEOUT"
      ]
    },
    "Get_Video_by_ID_or_Reference_IDResponseFields": {
      "properties": {
        "account_id": {
          "type": "string",
          "description": "Video Cloud account id "
        },
        "id": {
          "type": "string",
          "description": "video id "
        },
        "name": {
          "type": "string",
          "description": "video title "
        },
        "created_at": {
          "type": "datestring",
          "description": "when the video was created "
        },
        "custom_fields": {
          "type": "object",
          "description": "map of fieldname-value pairs ",
          "$ref": "#/definitions/custom_fields"
        },
        "cue_points": {
          "type": "object",
          "description": "array of cue point maps ",
          "$ref": "#/definitions/cue_points"
        },
        "description": {
          "type": "string",
          "description": "video short description "
        },
        "duration": {
          "type": "number",
          "description": "video duration in milliseconds "
        },
        "economics": {
          "type": "string",
          "description": "whether video is AD_SUPPORTED "
        },
        "poster_sources": {
          "type": "array",
          "description": "array of poster source maps (note that in many cases there will be one source with a src value identical to the poster value, but this array is included in case there are multiple protocols available, such as http and https) ",
          "items": {
            "$ref": "#/definitions/poster_sources"
          }
        },
        "poster": {
          "type": "string",
          "description": "URL for the default poster source image "
        },
        "projection": {
          "type": "string",
          "description": "The mapping projection for 360° videos, e.g. &quot;equirectangular&quot; "
        },
        "thumbnail_sources": {
          "type": "array",
          "description": "array of thumbnail source maps (note that in many cases there will be one source with a src value identical to the thumbnail value, but this array is included in case there are multiple protocols available, such as http and https) ",
          "items": {
            "$ref": "#/definitions/thumbnail_sources"
          }
        },
        "thumbnail": {
          "type": "string",
          "description": "URL for the default thumbnail source image "
        },
        "link": {
          "type": "object",
          "description": "map of scheduling properties ",
          "$ref": "#/definitions/link"
        },
        "long_description": {
          "type": "string",
          "description": "video long description "
        },
        "offline_enabled": {
          "type": "boolean",
          "description": "whether video is enabled for offline viewing "
        },
        "reference_id": {
          "type": "string",
          "description": "video reference-id (must be unique within the account) "
        },
        "tags": {
          "type": "array",
          "description": "array of tags ",
          "items": {
            "type": "string"
          }
        },
        "sources": {
          "type": "array",
          "description": "array of video sources (renditions) ",
          "items": {
            "$ref": "#/definitions/sources"
          }
        },
        "text_tracks": {
          "type": "object",
          "description": "array of text track maps ",
          "$ref": "#/definitions/text_tracks"
        },
        "updated_at": {
          "type": "datestring",
          "description": "when the video was last modified "
        },
        "ad_keys": {
          "type": "object",
          "description": "map of key/value pairs for ad requests ",
          "$ref": "#/definitions/ad_keys"
        }
      },
      "required": [
        "account_id",
        "id",
        "name",
        "created_at",
        "custom_fields",
        "cue_points",
        "description",
        "duration",
        "economics",
        "poster_sources",
        "poster",
        "projection",
        "thumbnail_sources",
        "thumbnail",
        "link",
        "long_description",
        "offline_enabled",
        "reference_id",
        "tags",
        "sources",
        "text_tracks",
        "updated_at",
        "ad_keys"
      ]
    },
    "Get_Video_by_ID_or_Reference_IDError400": {
      "properties": {
        "BAD_REQUEST": {
          "type": "",
          "description": "error_subcode:  DUPLICATE_PARAMETERS - The same parameter name was provided more than once in the request "
        }
      },
      "required": [
        "BAD_REQUEST"
      ]
    },
    "Get_Video_by_ID_or_Reference_IDError401": {
      "properties": {
        "INVALID_POLICY_KEY": {
          "type": "",
          "description": "Must be a legal policy key in an appropriate header. "
        }
      },
      "required": [
        "INVALID_POLICY_KEY"
      ]
    },
    "Get_Video_by_ID_or_Reference_IDError403": {
      "properties": {
        "ACCESS_DENIED": {
          "type": "",
          "description": "error_subcode:  ACCOUNT_ID  - The account id in the policy key does not match the account in the api request  CLIENT_GEO - The video is restricted from playing in the current geo region; the message will contain additional information about the specific issue. For more details, see the Playback API Error Reference  CLIENT_IP - The video is restricted at the current IP address  DOMAIN - The video is restricted from playing on the current domain  POLICY_ERROR - Error when evaluating the policy key  VIDEO_NOT_PLAYABLE - For a single video request, the video exists, but is not allowed to be played now. That could be any of the three reasons that videos are not playable: not sufficiently ingested, not active, not in scheduled date range. "
        }
      },
      "required": [
        "ACCESS_DENIED"
      ]
    },
    "Get_Video_by_ID_or_Reference_IDError404": {
      "properties": {
        "NOT_FOUND": {
          "type": "",
          "description": "error_subcode:  VIDEO_NOT_FOUND - The requested resource is not available. "
        }
      },
      "required": [
        "NOT_FOUND"
      ]
    },
    "Get_Video_by_ID_or_Reference_IDError405": {
      "properties": {
        "METHOD_NOT_ALLOWED": {
          "type": "",
          "description": "Only GET, HEAD and OPTIONS are allowed for this api. "
        }
      },
      "required": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "Get_Video_by_ID_or_Reference_IDError500": {
      "properties": {
        "SERVER_ERROR": {
          "type": "",
          "description": "Internal server error. "
        }
      },
      "required": [
        "SERVER_ERROR"
      ]
    },
    "Get_Video_by_ID_or_Reference_IDError502": {
      "properties": {
        "SERVER_ERROR": {
          "type": "",
          "description": "Got a bad response from a backend server.  Various *_RETRIEVE_FAILURE error codes: ACCOUNT_RETRIEVE_FAILURE, VIDEO_RETRIEVE_FAILURE, VIDEO_URLS_RETRIEVE_FAILURE. "
        }
      },
      "required": [
        "SERVER_ERROR"
      ]
    },
    "Get_Video_by_ID_or_Reference_IDError503": {
      "properties": {
        "SERVICE_UNAVAILABLE": {
          "type": "",
          "description": "Returned this response from a backend server. "
        }
      },
      "required": [
        "SERVICE_UNAVAILABLE"
      ]
    },
    "Get_Video_by_ID_or_Reference_IDError504": {
      "properties": {
        "SERVER_TIMEOUT": {
          "type": "",
          "description": "Either a backend server or one of the servers they rely on timed out. . "
        }
      },
      "required": [
        "SERVER_TIMEOUT"
      ]
    },
    "Get_VideosResponseFields": {
      "properties": {
        "account_id": {
          "type": "string",
          "description": "Video Cloud account id "
        },
        "id": {
          "type": "string",
          "description": "video id "
        },
        "name": {
          "type": "string",
          "description": "video title "
        },
        "created_at": {
          "type": "datestring",
          "description": "when the video was created "
        },
        "custom_fields": {
          "type": "object",
          "description": "map of fieldname-value pairs ",
          "$ref": "#/definitions/custom_fields"
        },
        "cue_points": {
          "type": "object",
          "description": "array of cue point maps ",
          "$ref": "#/definitions/cue_points"
        },
        "description": {
          "type": "string",
          "description": "video short description "
        },
        "duration": {
          "type": "number",
          "description": "video duration in milliseconds "
        },
        "economics": {
          "type": "string",
          "description": "whether video is AD_SUPPORTED "
        },
        "poster_sources": {
          "type": "array",
          "description": "array of poster source maps (note that in many cases there will be one source with a src value identical to the poster value, but this array is included in case there are multiple protocols available, such as http and https) ",
          "items": {
            "$ref": "#/definitions/poster_sources"
          }
        },
        "poster": {
          "type": "string",
          "description": "URL for the default poster source image "
        },
        "projection": {
          "type": "string",
          "description": "The mapping projection for 360° videos, e.g. &quot;equirectangular&quot; "
        },
        "thumbnail_sources": {
          "type": "array",
          "description": "array of thumbnail source maps (note that in many cases there will be one source with a src value identical to the thumbnail value, but this array is included in case there are multiple protocols available, such as http and https) ",
          "items": {
            "$ref": "#/definitions/thumbnail_sources"
          }
        },
        "thumbnail": {
          "type": "string",
          "description": "URL for the default thumbnail source image "
        },
        "link": {
          "type": "object",
          "description": "map of scheduling properties ",
          "$ref": "#/definitions/link"
        },
        "long_description": {
          "type": "string",
          "description": "video long description "
        },
        "offline_enabled": {
          "type": "boolean",
          "description": "whether video is enabled for offline viewing "
        },
        "reference_id": {
          "type": "string",
          "description": "video reference-id (must be unique within the account) "
        },
        "tags": {
          "type": "array",
          "description": "array of tags ",
          "items": {
            "type": "string"
          }
        },
        "sources": {
          "type": "array",
          "description": "array of video sources (renditions) ",
          "items": {
            "$ref": "#/definitions/sources"
          }
        },
        "text_tracks": {
          "type": "object",
          "description": "array of text track maps ",
          "$ref": "#/definitions/text_tracks"
        },
        "updated_at": {
          "type": "datestring",
          "description": "when the video was last modified "
        },
        "ad_keys": {
          "type": "object",
          "description": "map of key/value pairs for ad requests ",
          "$ref": "#/definitions/ad_keys"
        },
        "count": {
          "type": "number",
          "description": "the count of videos found "
        }
      },
      "required": [
        "account_id",
        "id",
        "name",
        "created_at",
        "custom_fields",
        "cue_points",
        "description",
        "duration",
        "economics",
        "poster_sources",
        "poster",
        "projection",
        "thumbnail_sources",
        "thumbnail",
        "link",
        "long_description",
        "offline_enabled",
        "reference_id",
        "tags",
        "sources",
        "text_tracks",
        "updated_at",
        "ad_keys",
        "count"
      ]
    },
    "Get_VideosError400": {
      "properties": {
        "BAD_REQUEST": {
          "type": "json",
          "description": "error_subcode:   DUPLICATE_PARAMETERS - The same parameter name was provided more than once in the request   INVALID_SEARCH - The search parameters are not valid   ILLEGAL_QUERY - The search string syntax was invalid - example: 1) doing a tags search that ends with a comma or has an unclosed quote   INVALID_SORT - The sort parameters specified an invalid field "
        }
      },
      "required": [
        "BAD_REQUEST"
      ]
    },
    "Get_VideosError401": {
      "properties": {
        "INVALID_POLICY_KEY": {
          "type": "json",
          "description": "Must be a legal policy key in an appropriate header. "
        }
      },
      "required": [
        "INVALID_POLICY_KEY"
      ]
    },
    "Get_VideosError403": {
      "properties": {
        "ACCESS_DENIED": {
          "type": "json",
          "description": "error_subcode:   ACCOUNT_ID  - The account id in the policy key does not match the account in the api request   API  - The policy key is not search-enabled when attempting to perform a search   CLIENT_GEO - The video is restricted from playing in the current geo region; the message will contain additional information about the specific issue. For more details, see the Playback API Error Reference   CLIENT_IP - The video is restricted at the current IP address   DOMAIN - The video is restricted from playing on the current domain   POLICY_ERROR - Error when evaluating the policy key "
        },
        "FORBIDDEN": {
          "type": "json",
          "description": "error_subcode:   VIDEO_NOT_PLAYABLE - For a single video request, the video exists, but is not allowed to be played now. That could be any of the four reasons that videos are not playable: not sufficiently ingested, has no sources, not active, not in scheduled date range. "
        }
      },
      "required": [
        "ACCESS_DENIED",
        "FORBIDDEN"
      ]
    },
    "Get_VideosError404": {
      "properties": {
        "NOT_FOUND": {
          "type": "json",
          "description": "error_subcode:   VIDEO_NOT_FOUND - The requested resource is not available. "
        }
      },
      "required": [
        "NOT_FOUND"
      ]
    },
    "Get_VideosError405": {
      "properties": {
        "METHOD_NOT_ALLOWED": {
          "type": "json",
          "description": "Only GET, HEAD and OPTIONS are allowed for this api. "
        }
      },
      "required": [
        "METHOD_NOT_ALLOWED"
      ]
    },
    "Get_VideosError500": {
      "properties": {
        "SERVER_ERROR": {
          "type": "json",
          "description": "Internal server error. "
        }
      },
      "required": [
        "SERVER_ERROR"
      ]
    },
    "Get_VideosError502": {
      "properties": {
        "SERVER_ERROR": {
          "type": "json",
          "description": "Got a bad response from a backend server.   Various *_RETRIEVE_FAILURE error codes: ACCOUNT_RETRIEVE_FAILURE, VIDEO_RETRIEVE_FAILURE, VIDEO_URLS_RETRIEVE_FAILURE. "
        }
      },
      "required": [
        "SERVER_ERROR"
      ]
    },
    "Get_VideosError503": {
      "properties": {
        "SERVICE_UNAVAILABLE": {
          "type": "json",
          "description": "Returned this response from a backend server. "
        }
      },
      "required": [
        "SERVICE_UNAVAILABLE"
      ]
    },
    "Get_VideosError504": {
      "properties": {
        "SERVER_TIMEOUT": {
          "type": "json",
          "description": "Either a backend server or one of the servers they rely on timed out. "
        }
      },
      "required": [
        "SERVER_TIMEOUT"
      ]
    }
  },
  "schemes": [
    "https"
  ],
  "host": "edge.api.brightcove.com",
  "basePath": "/playback/v1"
}