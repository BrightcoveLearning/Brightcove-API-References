{
  "swagger": "2.0",
  "info": {
    "title": "Once Status API Reference",
    "version": "1.0.0",
    "description": "Reference for the Once Status API, which allows customers to query the processing statuses of a particular Request ID (returned in the response body of an ingest request). Only the HTTP GET verb is supported and must be made over SSL. If you do not know the Request ID you can query by Foreign Key, which will return a list of all the Request IDs for that particular item. The status data returned will be summary of the major milestones along with any errors that occurred during processing."
  },
  "paths": {
    "/notifications/{request_id}": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get Notification Status DEPRECATED",
        "description": "Get the status of notifications for a request job ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The request_id for the job "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/notifications"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_Notification_Status_DEPRECATEDError4xx"
            }
          }
        },
        "operationId": "Get_Notification_Status_DEPRECATED"
      }
    },
    "/notifications/{request_id}/{notification_type}": {
      "get": {
        "tags": [
          "Resend"
        ],
        "summary": "Request Notifications Resend Deprecated",
        "description": "Get the status of notifications for a request job - This method is deprecated ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The request_id for the job "
          },
          {
            "name": "notification_type",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The notification type to be resent "
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The id for a single job that you want notifications resent for "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/notication_type"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Request_Notifications_ResendError4xx"
            }
          }
        },
        "operationId": "Request_Notifications_Resend"
      }
    },
    "/statuses/{request_id}": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Get Status by Request ID",
        "description": "Get the status of a request job ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "request_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The request ID for the job generated by the Once system "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Get_Status_by_request_IDResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_Status_by_request_IDError4xx"
            }
          }
        },
        "operationId": "Get_Status_by_request_ID"
      }
    },
    "/statuses": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Status by Foreign Key/Catalog",
        "description": "Provides a summary of notifications for the medium item ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "foreign_key",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The foreign key you created for a media item "
          },
          {
            "name": "catalog",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The catalog ID generated by the Once system "
          },
          {
            "name": "until",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A UNIX (Epoch) timestamp in seconds to limit the search window "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/requests"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Status_by_Foreign_Key_CatalogError4xx"
            }
          }
        },
        "operationId": "Status_by_Foreign_Key_Catalog"
      }
    },
    "": {
      "": {
        "tags": [
          "_Users_rcrooks_git_Brightcove_API_References_once_status_api_v1_doc_main_js"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "Success 200": {
            "description": "Success 200"
          }
        },
        "operationId": ""
      }
    }
  },
  "definitions": {
    "notifications": {
      "properties": {
        "sentTime": {
          "type": "number",
          "description": "the time the notification was sent in epoch milliseconds "
        },
        "event": {
          "type": "string",
          "description": "the event the notification was sent for "
        },
        "id": {
          "type": "string",
          "description": "the id for job "
        },
        "status": {
          "type": "string",
          "description": "the step status sent "
        },
        "notification": {
          "type": "object",
          "description": "details of the notification ",
          "$ref": "#/definitions/notifications.notification"
        },
        "details": {
          "type": "object",
          "description": "the notification details ",
          "$ref": "#/definitions/notifications.details"
        },
        "targets": {
          "type": "array",
          "description": "array of target URLs for the notification ",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "sentTime",
        "event",
        "id",
        "status",
        "notification",
        "details",
        "targets"
      ]
    },
    "notifications.notification": {
      "properties": {
        "notification": {
          "type": "string",
          "description": "the step type for the notification "
        },
        "request_id": {
          "type": "string",
          "description": "the job request_id "
        },
        "domain": {
          "type": "string",
          "description": "the domain for the media item "
        },
        "catalog": {
          "type": "string",
          "description": "the catalog for the media item "
        },
        "title": {
          "type": "string",
          "description": "the media item title "
        },
        "version": {
          "type": "number",
          "description": "the media item version "
        },
        "metadata": {
          "type": "object",
          "description": "the media item metadata ",
          "$ref": "#/definitions/notifications.notification.metadata"
        }
      },
      "required": [
        "notification",
        "request_id",
        "domain",
        "catalog",
        "title",
        "version",
        "metadata"
      ]
    },
    "notifications.details": {
      "properties": {
        "message": {
          "type": "string",
          "description": "the notification message "
        }
      },
      "required": [
        "message"
      ]
    },
    "Get_Notification_Status_DEPRECATEDError4xx": {
      "properties": {
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Authentication failed; check to make sure your policy key is correct "
        }
      },
      "required": [
        "UNAUTHORIZED"
      ]
    },
    "notication_type": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The single job id "
        },
        "submitted": {
          "type": "boolean",
          "description": "Whether the notification was resent "
        }
      },
      "required": [
        "id",
        "submitted"
      ]
    },
    "Request_Notifications_ResendError4xx": {
      "properties": {
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Authentication failed; check to make sure your policy key is correct "
        }
      },
      "required": [
        "UNAUTHORIZED"
      ]
    },
    "Get_Status_by_request_IDResponseFields": {
      "properties": {
        "status": {
          "type": "string",
          "description": "The overall status of the job: COMPLETE, PENDING, PROCESSING, SKIPPED, WARN or ERROR (WARNindicates that the job completed and the video is playable, but there was an issue with processing some asset, usually timed text ) "
        },
        "startTime": {
          "type": "number",
          "description": "The time when the job began in epoch time (milliseconds) "
        },
        "completeTime": {
          "type": "number",
          "description": "The time when the job finished in epoch time (milliseconds) "
        },
        "steps": {
          "type": "object",
          "description": "The steps of the job ",
          "$ref": "#/definitions/steps"
        }
      },
      "required": [
        "status",
        "startTime",
        "completeTime",
        "steps"
      ]
    },
    "steps": {
      "properties": {
        "ingest": {
          "type": "object",
          "description": "The ingest step ",
          "$ref": "#/definitions/steps.ingest"
        },
        "timedtext": {
          "type": "object",
          "description": "The timed text object for captions ",
          "$ref": "#/definitions/steps.timedtext"
        },
        "transcode": {
          "type": "object",
          "description": "The transcode step ",
          "$ref": "#/definitions/steps.transcode"
        },
        "notification": {
          "type": "object",
          "description": "The notification step ",
          "$ref": "#/definitions/steps.notification"
        },
        "publish": {
          "type": "object",
          "description": "The publish step ",
          "$ref": "#/definitions/steps.publish"
        }
      },
      "required": [
        "ingest",
        "timedtext",
        "transcode",
        "notification",
        "publish"
      ]
    },
    "steps.ingest": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the step "
        },
        "status": {
          "type": "string",
          "description": "The status of ingest step: COMPLETE, PENDING, PROCESSING, SKIPPED, or ERROR "
        },
        "startTime": {
          "type": "number",
          "description": "The time when the ingest began in epoch time (milliseconds) "
        },
        "completeTime": {
          "type": "number",
          "description": "The time when the ingest finished in epoch time (milliseconds) "
        },
        "input": {
          "type": "object",
          "description": "The request inputs ",
          "$ref": "#/definitions/steps.ingest.input"
        },
        "output": {
          "type": "object",
          "description": "The job output ",
          "$ref": "#/definitions/steps.ingest.output"
        }
      },
      "required": [
        "name",
        "status",
        "startTime",
        "completeTime",
        "input",
        "output"
      ]
    },
    "steps.ingest.input": {
      "properties": {
        "foreign_key": {
          "type": "string",
          "description": "The unique identifier for the asset "
        },
        "domainId": {
          "type": "string",
          "description": "The domain id "
        },
        "catalog_id": {
          "type": "string",
          "description": "The catalog id "
        },
        "keywords": {
          "type": "array",
          "description": "The keyword array for the asset ",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "type": "object",
          "description": "The metadata map for the asset ",
          "$ref": "#/definitions/steps.ingest.input.metadata"
        },
        "media": {
          "type": "object",
          "description": "The media input ",
          "$ref": "#/definitions/steps.ingest.input.media"
        },
        "notifications": {
          "type": "array",
          "description": "Array of notification maps ",
          "items": {
            "$ref": "#/definitions/steps.ingest.input.notifications"
          }
        },
        "publicationRules": {
          "type": "array",
          "description": "Array of publication rule maps ",
          "items": {
            "$ref": "#/definitions/steps.ingest.input.publicationRules"
          }
        },
        "cuePoints": {
          "type": "array",
          "description": "Array of cur point maps ",
          "items": {
            "$ref": "#/definitions/steps.ingest.input.cuePoints"
          }
        }
      },
      "required": [
        "foreign_key",
        "domainId",
        "catalog_id",
        "keywords",
        "metadata",
        "media",
        "notifications",
        "publicationRules",
        "cuePoints"
      ]
    },
    "steps.ingest.input.media": {
      "properties": {
        "sourceURL": {
          "type": "string",
          "description": "The media source URL "
        }
      },
      "required": [
        "sourceURL"
      ]
    },
    "steps.ingest.output": {
      "properties": {
        "mediaItemId": {
          "type": "string",
          "description": "The media item id "
        },
        "hasChanged": {
          "type": "boolean",
          "description": "Whether the media item has been modified "
        },
        "description": {
          "type": "object",
          "description": "Description object for the media item ",
          "$ref": "#/definitions/steps.ingest.output.description"
        }
      },
      "required": [
        "mediaItemId",
        "hasChanged",
        "description"
      ]
    },
    "steps.ingest.output.description": {
      "properties": {
        "url": {
          "type": "string",
          "description": "URL for the media item "
        },
        "lastModified": {
          "type": "datestring",
          "description": "Date/time the media item was last modified "
        },
        "etag": {
          "type": "string",
          "description": "Date/time the media item etag "
        },
        "fileSize": {
          "type": "number",
          "description": "size of the output media item in bytes "
        }
      },
      "required": [
        "url",
        "lastModified",
        "etag",
        "fileSize"
      ]
    },
    "steps.timedtext": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The human readable name for captions "
        },
        "status": {
          "type": "string",
          "description": "The status of the job processing for captions "
        },
        "startTime": {
          "type": "number",
          "description": "The start time for processing the captions "
        },
        "completeTime": {
          "type": "number",
          "description": "The complete time for processing the captions "
        },
        "output": {
          "type": "array",
          "description": "Array of timed text output objects ",
          "items": {
            "$ref": "#/definitions/steps.timedtext.output"
          }
        }
      },
      "required": [
        "name",
        "status",
        "startTime",
        "completeTime",
        "output"
      ]
    },
    "steps.timedtext.output": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The id for the output "
        },
        "timedTextType": {
          "type": "string",
          "description": "The type for this timed text set "
        },
        "languages": {
          "type": "array",
          "description": "Array of language codes for the captions "
        }
      },
      "required": [
        "id",
        "timedTextType",
        "languages"
      ]
    },
    "steps.transcode": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the step "
        },
        "status": {
          "type": "string",
          "description": "The status of transcode step: COMPLETE, PENDING, PROCESSING, SKIPPED, or ERROR "
        },
        "startTime": {
          "type": "number",
          "description": "The time when the transcode began in epoch time (milliseconds) "
        },
        "completeTime": {
          "type": "number",
          "description": "The time when the transcode finished in epoch time (milliseconds) "
        },
        "output": {
          "type": "object",
          "description": "map of the transcode output ",
          "$ref": "#/definitions/steps.transcode.output"
        }
      },
      "required": [
        "name",
        "status",
        "startTime",
        "completeTime",
        "output"
      ]
    },
    "steps.transcode.output": {
      "properties": {
        "renditions": {
          "type": "array",
          "description": "array of rendition ids ",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "renditions"
      ]
    },
    "steps.notification": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the step "
        },
        "status": {
          "type": "string",
          "description": "The status of notification step: COMPLETE, PENDING, PROCESSING, SKIPPED, or ERROR "
        },
        "startTime": {
          "type": "number",
          "description": "The time when the notification began in epoch time (milliseconds) "
        },
        "completeTime": {
          "type": "number",
          "description": "The time when the notification finished in epoch time (milliseconds) "
        },
        "input": {
          "type": "object",
          "description": "map of the notification inputs ",
          "$ref": "#/definitions/steps.notification.input"
        },
        "output": {
          "type": "object",
          "description": "map of the notification outputs ",
          "$ref": "#/definitions/steps.notification.output"
        }
      },
      "required": [
        "name",
        "status",
        "startTime",
        "completeTime",
        "input",
        "output"
      ]
    },
    "steps.notification.input": {
      "properties": {
        "mediaItemId": {
          "type": "string",
          "description": "The media item id "
        },
        "domainId": {
          "type": "string",
          "description": "The domain id "
        },
        "catalog_id": {
          "type": "string",
          "description": "The catalog id "
        },
        "version": {
          "type": "number",
          "description": "The media item version "
        },
        "durationMS": {
          "type": "number",
          "description": "Duration of the media item in milliseconds "
        },
        "notificationOverrides": {
          "type": "array",
          "description": "Array of notification overrides, if any ",
          "items": {
            "$ref": "#/definitions/steps.notification.input.notificationOverrides"
          }
        }
      },
      "required": [
        "mediaItemId",
        "domainId",
        "catalog_id",
        "version",
        "durationMS",
        "notificationOverrides"
      ]
    },
    "steps.notification.output": {
      "properties": {
        "sentNotification": {
          "type": "boolean",
          "description": "whether notification was sent "
        }
      },
      "required": [
        "sentNotification"
      ]
    },
    "steps.publish": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the step "
        },
        "status": {
          "type": "string",
          "description": "The status of publish step: COMPLETE, PENDING, PROCESSING, SKIPPED, or ERROR "
        },
        "startTime": {
          "type": "number",
          "description": "The time when the publish began in epoch time (milliseconds) "
        },
        "completeTime": {
          "type": "number",
          "description": "The time when the publish finished in epoch time (milliseconds) "
        },
        "output": {
          "type": "object",
          "description": "map of the publish output ",
          "$ref": "#/definitions/steps.publish.output"
        }
      },
      "required": [
        "name",
        "status",
        "startTime",
        "completeTime",
        "output"
      ]
    },
    "steps.publish.output": {
      "properties": {
        "version": {
          "type": "number",
          "description": "Version of the media item "
        },
        "duration": {
          "type": "number",
          "description": "Duration of the media item in milliseconds "
        }
      },
      "required": [
        "version",
        "duration"
      ]
    },
    "Get_Status_by_request_IDError4xx": {
      "properties": {
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Authentication failed; check to make sure your policy key is correct "
        }
      },
      "required": [
        "UNAUTHORIZED"
      ]
    },
    "requests": {
      "properties": {
        "request_id": {
          "type": "string",
          "description": "the request id "
        },
        "startTime": {
          "type": "number",
          "description": "the job start time in epoch milliseconds "
        },
        "href": {
          "type": "string",
          "description": "the url to get the full status of the request "
        }
      },
      "required": [
        "request_id",
        "startTime",
        "href"
      ]
    },
    "Status_by_Foreign_Key_CatalogResponseFields": {
      "properties": {
        "previousPage": {
          "type": "string",
          "description": "the url to get the next older results, if any (up to 100 results are returned at a time) "
        }
      },
      "required": [
        "previousPage"
      ]
    },
    "Status_by_Foreign_Key_CatalogError4xx": {
      "properties": {
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Authentication failed; check to make sure your policy key is correct "
        }
      },
      "required": [
        "UNAUTHORIZED"
      ]
    }
  },
  "schemes": [
    "https"
  ],
  "host": "api.unicornmedia.com",
  "basePath": "/status-api"
}