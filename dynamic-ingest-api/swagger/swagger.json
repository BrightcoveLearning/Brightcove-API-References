{
  "swagger": "2.0",
  "info": {
    "title": "Dynamic Ingest API Reference",
    "version": "1.0.0",
    "description": "Reference for the Brightcove Dynamic Ingest API, used to add videos, images, and captions to your media library, and to replace existing media assets. <strong style=\"color:#CC0000\">NOTE THAT BEFORE YOU INGEST A NEW VIDEO, YOU MUST FIRST MAKE A <a href=\"https://brightcovelearning.github.io/Brightcove-API-References/cms-api/v1/doc/index.html#api-videoGroup-Create_Video\">CREATE VIDEO REQUEST</a>.</strong> To test API requests, you can use our <a href=\"https://support.brightcove.com/node/17910\" target=\"_blank\">API Testing Tools</a>"
  },
  "paths": {
    "/accounts/{account_id}/videos/{video_id}/upload-urls/{source_name}": {
      "get": {
        "tags": [
          "Ingest"
        ],
        "summary": "Get S3 URLs",
        "description": "Get temporary S3 URLs to upload source files for ingestion into Video Cloud. See Source File Upload for more information. NOTE that before you ingest a new video, you must first make a Create Video request. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Video Cloud account ID. "
          },
          {
            "name": "video_id",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "Video Cloud video ID; if this is a new video ingest, the ID will be the one returned by the Create Video request "
          },
          {
            "name": "source_name",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "the video source filename - the name should not contain any URL-reserved characters such as ?, &amp;, # or spaces "
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content-Type: application/json "
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Authorization: Bearer access_token (see Getting Access Tokens) "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Get_S3_URLsResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_S3_URLsError4xx"
            }
          },
          "Error 5xx": {
            "description": "Error 5xx",
            "schema": {
              "$ref": "#/definitions/Get_S3_URLsError5xx"
            }
          }
        },
        "operationId": "Get_S3_URLs"
      }
    },
    "/accounts/{account_id}/videos/{video_id}/ingest-requests": {
      "post": {
        "tags": [
          "Ingest"
        ],
        "summary": "Ingest Media Asset",
        "description": "Uploads a video, images, and/or text track (WebVTT files) and adds them to your media library. NOTE that before you ingest a new video, you must first make a Create Video request. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Video Cloud account ID. "
          },
          {
            "name": "video_id",
            "in": "path",
            "required": true,
            "type": "number",
            "description": "Video Cloud video ID; if this is a new video ingest, the ID will be the one returned by the Create Video request "
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Content-Type: application/json "
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Authorization: Bearer access_token (see Getting Access Tokens) "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Ingest_Media_AssetResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Ingest_Media_AssetError4xx"
            }
          },
          "Error 5xx": {
            "description": "Error 5xx",
            "schema": {
              "$ref": "#/definitions/Ingest_Media_AssetError5xx"
            }
          }
        },
        "operationId": "Ingest_Media_Asset"
      }
    },
    "": {
      "": {
        "tags": [
          "_Users_rcrooks_git_Brightcove_API_References_dynamic_ingest_api_v1_doc_main_js"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "Success 200": {
            "description": "Success 200"
          }
        },
        "operationId": ""
      }
    }
  },
  "definitions": {
    "Get_S3_URLsResponseFields": {
      "properties": {
        "bucket": {
          "type": "string",
          "description": "the S3 bucket name "
        },
        "object_key": {
          "type": "string",
          "description": "the access key used for authenticating the upload request (used for multipart uploads) "
        },
        "access_key_id": {
          "type": "string",
          "description": "the access key used for authenticating the upload request (used for multipart uploads) "
        },
        "secret_access_key": {
          "type": "string",
          "description": "the secret access key used for authenticating the upload request (used for multipart uploads) "
        },
        "session_token": {
          "type": "string",
          "description": "the secret access key used for authenticating the upload request (used for multipart uploads) "
        },
        "SignedUrl": {
          "type": "string",
          "description": "this is a shorthand S3 url that you can PUT your source file(s) to if you have relatively small videos and are not implementing multipart upload "
        },
        "ApiRequestUrl": {
          "type": "string",
          "description": "this is the URL you will include in your Dynamic Ingest POST request for the Master url or url for the image/text_tracks assets "
        }
      },
      "required": [
        "bucket",
        "object_key",
        "access_key_id",
        "secret_access_key",
        "session_token",
        "SignedUrl",
        "ApiRequestUrl"
      ]
    },
    "Get_S3_URLsError4xx": {
      "properties": {
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Authentication failed; check to make sure your client credentials were correct for the access token "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested "
        },
        "RATE_LIMIT_EXCEEDED": {
          "type": "json",
          "description": "429: Dynamic Ingest job not created. Reduce the number of concurrent jobs for this account before trying again. This error has been logged "
        }
      },
      "required": [
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND",
        "RATE_LIMIT_EXCEEDED"
      ]
    },
    "Get_S3_URLsError5xx": {
      "properties": {
        "INTERNAL_ERROR": {
          "type": "json",
          "description": "500: Internal error, please try again later "
        }
      },
      "required": [
        "INTERNAL_ERROR"
      ]
    },
    "Ingest_Media_AssetResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "job id for the request "
        }
      },
      "required": [
        "id"
      ]
    },
    "Ingest_Media_AssetError4xx": {
      "properties": {
        "UNAUTHORIZED": {
          "type": "json",
          "description": "401: Authentication failed; check to make sure your client credentials were correct for the access token "
        },
        "RESOURCE_NOT_FOUND": {
          "type": "json",
          "description": "404: The api couldn&#39;t find the resource you requested "
        },
        "PROFILE": {
          "type": "json",
          "description": "400: Unable to find profile by name "
        },
        "NOT_SUBMITTED": {
          "type": "json",
          "description": "400: Unable to submit job, please try again later "
        },
        "NO_SUCH_VIDEO": {
          "type": "json",
          "description": "400: Unable to find the referenced video "
        },
        "NO_SOURCE": {
          "type": "json",
          "description": "400: Unable to find a source to use "
        },
        "CDN_CREDENTIALS": {
          "type": "json",
          "description": "400: Unable to fetch CDN credentials "
        },
        "BAD_CALLBACKS": {
          "type": "json",
          "description": "400: Callbacks were not in expected format "
        },
        "DYNAMIC_DELIVERY_NOT_ALLOWED": {
          "type": "json",
          "description": "403: This account is not enabled for Dynamic Delivery, but a Dynamic Delivery profile was specified. "
        },
        "CONTEXT_AWARE_ENCODING_NOT_ALLOWED": {
          "type": "json",
          "description": "403: This account is not enabled for Context Aware Encoding, but a Context Aware Encoding profile was specified. "
        },
        "MALFORMED_SOURCE_URL": {
          "type": "json",
          "description": "422: source url is malformed. "
        },
        "BAD_PROTOCOL_SOURCE_URL": {
          "type": "json",
          "description": "422: source url uses a unsupported protocol. "
        },
        "EXCEED_MAXIMUM_VTT_SOURCES": {
          "type": "json",
          "description": "422: vtt sources exceed the maximum size. "
        },
        "INVALID_VTT_KIND": {
          "type": "json",
          "description": "422: vtt kind is invalid. "
        },
        "CONSTRAINT_VIOLATION": {
          "type": "json",
          "description": "422: capture-image is not allowed if an image source is provided. "
        },
        "UNPROCESSABLE_ENTITY": {
          "type": "json",
          "description": "422: request data contains some unprocessable entity. "
        },
        "BAD_REQUEST": {
          "type": "json",
          "description": "400: Unable to parse request body. "
        },
        "RATE_LIMIT_EXCEEDED": {
          "type": "json",
          "description": "429: Dynamic Ingest job not created. Reduce the number of concurrent jobs for this account before trying again. This error has been logged "
        },
        "CDN_CONFIGS": {
          "type": "json",
          "description": "Unable to fetch CDN credentials "
        },
        "AMBIGUOUS_REQUEST": {
          "type": "json",
          "description": "400 Both a master url and use_archived_master were set in the request. "
        }
      },
      "required": [
        "UNAUTHORIZED",
        "RESOURCE_NOT_FOUND",
        "PROFILE",
        "NOT_SUBMITTED",
        "NO_SUCH_VIDEO",
        "NO_SOURCE",
        "CDN_CREDENTIALS",
        "BAD_CALLBACKS",
        "DYNAMIC_DELIVERY_NOT_ALLOWED",
        "CONTEXT_AWARE_ENCODING_NOT_ALLOWED",
        "MALFORMED_SOURCE_URL",
        "BAD_PROTOCOL_SOURCE_URL",
        "EXCEED_MAXIMUM_VTT_SOURCES",
        "INVALID_VTT_KIND",
        "CONSTRAINT_VIOLATION",
        "UNPROCESSABLE_ENTITY",
        "BAD_REQUEST",
        "RATE_LIMIT_EXCEEDED",
        "CDN_CONFIGS",
        "AMBIGUOUS_REQUEST"
      ]
    },
    "Ingest_Media_AssetError5xx": {
      "properties": {
        "SUBMISSION_FAILURE": {
          "type": "json",
          "description": "500: Unable to submit job please try again later. "
        },
        "INTERNAL_ERROR": {
          "type": "json",
          "description": "500: Internal error, please try again later "
        }
      },
      "required": [
        "SUBMISSION_FAILURE",
        "INTERNAL_ERROR"
      ]
    }
  },
  "schemes": [
    "https"
  ],
  "host": "ingest.api.brightcove.com",
  "basePath": "/v1"
}