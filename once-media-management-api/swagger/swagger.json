{
  "swagger": "2.0",
  "info": {
    "title": "Once Media Management API Reference",
    "version": "1.0.0",
    "description": "The Media Management API is a RESTful API for accessing and configuring the components of the domain for an authorized user. The multi-faceted and cascading configuration hierarchy gives the domain owner the ability to set-up domain, application, catalog and mediaitem level settings. The authorized user has the ability to create, read, update and delete anything from ad configurations to metadata on independent media items. It provides easy to use methods for fronting UI components in an existing CMS or through a programmatic function."
  },
  "paths": {
    "/domains/{domainId}/adServers": {
      "post": {
        "tags": [
          "Ad_Decisioning_Servers"
        ],
        "summary": "Create Ad Decisioning Server",
        "description": "Create an adServer, defining the base URL and query string variables that will be fired to your ad provider for a single VAST ad or DFP/SmartXML ad playlist response. Please see our guide for Converting an ad tag for the Once Media Management API. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Create_Ad_Decisioning_ServerResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Create_Ad_Decisioning_ServerError4xx"
            }
          }
        },
        "operationId": "Create_Ad_Decisioning_Server"
      },
      "get": {
        "tags": [
          "Ad_Decisioning_Servers"
        ],
        "summary": "Get All Ad Decisioning Servers",
        "description": "Retrieves all ad decisioning servers configured in the domain. This method returns 20 results by default, totalResults indicates the total number of applications in the domain, previous and/or next page request URLs will be included within the response if necessary. URL Parameters may be appended to modify result sets. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "number",
            "description": "The number of items to return for the request "
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            "description": "The set of items (based on pageSize) to return "
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter to applications that have name substring. E.g. name=foo could return applications named &quot;foo&quot;, &quot;foobar&quot;, &quot;foorific&quot; "
          },
          {
            "name": "sortField",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter to applications that have name substring. E.g. name=foo could return applications named &quot;foo&quot;, &quot;foobar&quot;, &quot;foorific&quot; "
          },
          {
            "name": "sortDirection",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort ascending or descending. "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/results"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_All_Ad_Decisioning_ServersError4xx"
            }
          }
        },
        "operationId": "Get_All_Ad_Decisioning_Servers"
      }
    },
    "/domains/{domainId}/adServers/{adserverId}": {
      "delete": {
        "tags": [
          "Ad_Decisioning_Servers"
        ],
        "summary": "Delete Ad Decisioning Server",
        "description": "Deletes the specified ad decisioning server. NOTE: This change will remove any application adConfigs utilizing the deleted adServer. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "adserverId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The adServerId "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Delete_Ad_Decisioning_ServerResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Delete_Ad_Decisioning_ServerError4xx"
            }
          }
        },
        "operationId": "Delete_Ad_Decisioning_Server"
      },
      "get": {
        "tags": [
          "Ad_Decisioning_Servers"
        ],
        "summary": "Get Ad Decisioning Server Details",
        "description": "Retrieves details of a specified adServer. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "adserverId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The adServerId "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Get_Ad_Decisioning_Server_DetailsResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_Ad_Decisioning_Server_DetailsError4xx"
            }
          }
        },
        "operationId": "Get_Ad_Decisioning_Server_Details"
      },
      "post": {
        "tags": [
          "Ad_Decisioning_Servers"
        ],
        "summary": "Update Ad Decisioning Server",
        "description": "Update the specified adServerâ€™s name, base URL, and/or variables. NOTE: This change will affect any application adConfigs utilizing the updated adServer. If you need an updated adServer configuration without changing existing applications or ad configurations, create a new adServer and then create or modify applications and their adConfigs to use the new adServer. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Update_Ad_Decisioning_ServerResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Update_Ad_Decisioning_ServerError4xx"
            }
          }
        },
        "operationId": "Update_Ad_Decisioning_Server"
      }
    },
    "/domains/{domainId}/applications/{applicationId}/adConfig": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Add or Replace Application Ad Configuration",
        "description": "Add or replace the adConfig assigned to the specified application. Below are two examples:  Single VAST ad request(s) will be made for each configured adPosition (preRoll, midRoll, and/or postRoll). Multiple (ad) configuration, enabling an ad decisioning server to specify all ad breaks in a single response (Freewheel SmartXML, DFP Ad Rules).  ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The application Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields Example 1": {
            "description": "Response Fields Example 1",
            "schema": {
              "$ref": "#/definitions/Add_or_Replace_Application_Ad_ConfigurationResponseFieldsExample1"
            }
          },
          "Response Fields Example 2": {
            "description": "Response Fields Example 2",
            "schema": {
              "$ref": "#/definitions/Add_or_Replace_Application_Ad_ConfigurationResponseFieldsExample2"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Add_or_Replace_Application_Ad_ConfigurationError4xx"
            }
          }
        },
        "operationId": "Add_or_Replace_Application_Ad_Configuration"
      },
      "delete": {
        "tags": [
          "Applications"
        ],
        "summary": "Delete Application Ad Configurations",
        "description": "Deletes all ad configurations from the specified application. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The application Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Delete_Application_Ad_ConfigurationsResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Delete_Application_Ad_ConfigurationsError4xx"
            }
          }
        },
        "operationId": "Delete_Application_Ad_Configurations"
      },
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get All Application Ad Configurations",
        "description": "Retrieves all adConfigs assigned to a single Application. Below are two examples: 1.Single VAST ad request(s) will be made for each configured adPosition (preRoll, midRoll, and/or postRoll). 2.Multiple (ad) configuration, enabling an ad decisioning server to specify all ad breaks in a single response (Freewheel SmartXML, DFP Ad Rules). ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The application Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields Example 1": {
            "description": "Response Fields Example 1",
            "schema": {
              "$ref": "#/definitions/preRoll"
            }
          },
          "Response Fields Example 2": {
            "description": "Response Fields Example 2",
            "schema": {
              "$ref": "#/definitions/ad"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_All_Application_Ad_ConfigurationsError4xx"
            }
          }
        },
        "operationId": "Get_All_Application_Ad_Configurations"
      }
    },
    "/domains/{domainId}/applications": {
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Create Application",
        "description": "Creates an new application in the domain. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Create_ApplicationResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Create_ApplicationError4xx"
            }
          }
        },
        "operationId": "Create_Application"
      },
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get All Applications",
        "description": "Returns all applications configured in the domain. This method returns 20 results by default, totalResults indicates the total number of applications in the domain, previous and/or next page request URLs will be included within the response if necessary. URL Parameters may be appended to modify result sets. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "number",
            "description": "The number of items to return for the request "
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            "description": "The set of items (based on pageSize) to return "
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter to applications that have name substring. E.g. name=foo could return applications named &quot;foo&quot;, &quot;foobar&quot;, &quot;foorific&quot; "
          },
          {
            "name": "sortField",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter to applications that have name substring. E.g. name=foo could return applications named &quot;foo&quot;, &quot;foobar&quot;, &quot;foorific&quot; "
          },
          {
            "name": "sortDirection",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort ascending or descending. "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/results"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_All_ApplicationsError4xx"
            }
          }
        },
        "operationId": "Get_All_Applications"
      }
    },
    "/domains/{domainId}/applications/{applicationId}": {
      "delete": {
        "tags": [
          "Applications"
        ],
        "summary": "Delete Application",
        "description": "Deletes an application from the domain. This method will delete all of the applicationâ€™s adConfigs, but will not delete any related adServer(s). See below for a method to delete adServers. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The application Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Delete_ApplicationResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Delete_ApplicationError4xx"
            }
          }
        },
        "operationId": "Delete_Application"
      },
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get Application Details",
        "description": "Retrieves the details of an application, including its ad configurations. Below are two examples:  Single VAST ad request(s) will be made for each configured adPosition (preRoll, midRoll, and/or postRoll). Multiple (ad) configuration, enabling an ad decisioning server to specify all ad breaks in a single response (Freewheel SmartXML, DFP Ad Rules).  ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The application Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields Example 1": {
            "description": "Response Fields Example 1",
            "schema": {
              "$ref": "#/definitions/Get_Application_DetailsResponseFieldsExample1"
            }
          },
          "Response Fields Example 2": {
            "description": "Response Fields Example 2",
            "schema": {
              "$ref": "#/definitions/Get_Application_DetailsResponseFieldsExample2"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_Application_DetailsError4xx"
            }
          }
        },
        "operationId": "Get_Application_Details"
      },
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Update Application",
        "description": "Update the name or number of ads requested in the VAST pre/mid/postRoll slots. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The application Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Update_ApplicationResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Update_ApplicationError4xx"
            }
          }
        },
        "operationId": "Update_Application"
      }
    },
    "/domains/{domainId}/catalogs/{catalogId}/renditions/": {
      "post": {
        "tags": [
          "Catalog"
        ],
        "summary": "Add Catalog Rendition",
        "description": "Add the specified new rendition to a catalogâ€™s rendition set. New mediaItems ingested to the catalog will be assigned the specified rendition. NOTE: This method will not add the specified rendition to existing mediaItems in the catalog. Please contact Support if you also need new renditions assigned to previously-ingested mediaItems. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The catalog id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Add_Catalog_RenditionResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Add_Catalog_RenditionError4xx"
            }
          }
        },
        "operationId": "Add_Catalog_Rendition"
      }
    },
    "/domains/{domainId}/catalogs": {
      "post": {
        "tags": [
          "Catalog"
        ],
        "summary": "Create Catalog",
        "description": "Creates a new catalog within the parent domainId. You may specify renditions when creating the catalog, otherwise it will be assigned all domain renditions marked as default. The new catalog will also inherit any domain publication rules. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Create_CatalogResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Create_CatalogError4xx"
            }
          }
        },
        "operationId": "Create_Catalog"
      },
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get All Catalogs",
        "description": "Retrieves all catalogs in a domain. This method returns 20 results by default, totalResults indicates the total number of catalogs, previous and/or next page request URLs will be included within the response if necessary. URL Parameters may be appended to modify result sets. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "number",
            "description": "The number of items to return for the request "
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            "description": "The set of items (based on pageSize) to return "
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter to applications that have name substring. E.g. name=foo could return applications named &quot;foo&quot;, &quot;foobar&quot;, &quot;foorific&quot; "
          },
          {
            "name": "sortField",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter to applications that have name substring. E.g. name=foo could return applications named &quot;foo&quot;, &quot;foobar&quot;, &quot;foorific&quot; "
          },
          {
            "name": "sortDirection",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort ascending or descending. "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/results"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_All_CatalogsError4xx"
            }
          }
        },
        "operationId": "Get_All_Catalogs"
      },
      "put": {
        "tags": [
          "Catalog"
        ],
        "summary": "Update Catalog Name",
        "description": "Assign a new name to the specified catalogId. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Update_Catalog_NameResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Update_Catalog_NameError4xx"
            }
          }
        },
        "operationId": "Update_Catalog_Name"
      }
    },
    "/domains/{domainId}/catalog/{catalogId}/publicationRules": {
      "post": {
        "tags": [
          "Catalog"
        ],
        "summary": "Create Catalog Publication Rule",
        "description": "Create a catalog publication rule. NOTE: A new catalog publication rule created by this method will only be applied to new mediaItems ingested to the catalog, but will not be applied to existing mediaItems within. Please see below for a method to create or update publication rules assigned to individual mediaItems. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The catalog id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Create_Catalog_Publication_RuleResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Create_Catalog_Publication_RuleError4xx"
            }
          }
        },
        "operationId": "Create_Catalog_Publication_Rule"
      }
    },
    "/domains/{domainId}/catalogs/{catalogId}/renditions/{renditionId}": {
      "delete": {
        "tags": [
          "Catalog"
        ],
        "summary": "Delete Catalog Rendition",
        "description": "Delete the specified rendition from a catalogâ€™s rendition set. New mediaItems ingested to the catalog will no longer be assigned the specified rendition. NOTE: This method will not remove the specified rendition from existing mediaItems in the catalog. Please contact Support if you also need the specified rendition removed from previously-ingested mediaItems. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The catalog id "
          },
          {
            "name": "renditionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The rendition id to remove from the catalog set "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Delete_Catalog_RenditionResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Delete_Catalog_RenditionError4xx"
            }
          }
        },
        "operationId": "Delete_Catalog_Rendition"
      },
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Rendition Details",
        "description": "Returns the settings of the selected transcode rendition indicated by the renditionId. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The catalog id "
          },
          {
            "name": "renditionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The rendition id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Get_Catalog_Rendition_DetailsResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_Catalog_Rendition_DetailsError4xx"
            }
          }
        },
        "operationId": "Get_Catalog_Rendition_Details"
      },
      "put": {
        "tags": [
          "Catalog"
        ],
        "summary": "Replace All Catalog Renditions",
        "description": "Replace (overwrite) the specified catalogâ€™s current rendition set, using an updated array in the request body. NOTE: This method will not add the specified rendition(s) to, nor will it remove renditions from, existing mediaitems in the specified catalog. Please contact Support if you also need renditions assigned to or removed from previously-ingested mediaItems in the catalog. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The catalog id "
          },
          {
            "name": "renditionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The rendition id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Replace_All_Catalog_RenditionsResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Replace_All_Catalog_RenditionsError4xx"
            }
          }
        },
        "operationId": "Replace_All_Catalog_Renditions"
      }
    },
    "/domains/{domainId}/catalogs/{catalogId}/publicationRules": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get All Catalog Publication Rules",
        "description": "Retrieves all publicationRuleIds assigned to a Catalog. Please review the Content Restriction section of our Once VOD 2.0 Guide for details on what Publication Rules can do and how they are inherited. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The catalog id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Get_All_Catalog_Publication_RulesResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_All_Catalog_Publication_RulesError4xx"
            }
          }
        },
        "operationId": "Get_All_Catalog_Publication_Rules"
      }
    },
    "/domains/{domainId}/catalogs/{catalogId}/renditions": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get All Catalog Renditions",
        "description": "Retrieves the rendition set assigned to the specified catalog. NOTE: All videos ingested to this catalog will have these renditions assigned. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The catalog id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/results"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_All_Catalog_RenditionsError4xx"
            }
          }
        },
        "operationId": "Get_All_Catalog_Renditions"
      }
    },
    "/domains/{domainId}/catalogs/{catalogId}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Details",
        "description": "Retrieves details of a specified catalog ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The catalog id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Get_Catalog_DetailsResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_Catalog_DetailsError4xx"
            }
          }
        },
        "operationId": "Get_Catalog_Details"
      }
    },
    "/domains/{domainId}/catalogs/{catalogId}/publicationRules/{publicationRuleId}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Catalog Publication Rule Details",
        "description": "Retrieves configuration of a catalog-level publication rule. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The catalog id "
          },
          {
            "name": "publicationRuleId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The publication rule id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Get_Catalog_Publication_Rule_DetailsResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_Catalog_Publication_Rule_DetailsError4xx"
            }
          }
        },
        "operationId": "Get_Catalog_Publication_Rule_Details"
      },
      "delete": {
        "tags": [
          "Domain"
        ],
        "summary": "Delete Catalog Publication Rule",
        "description": "Deletes the specified catalog publication rule. NOTE: Deleting a catalog publication rule will prevent it from being applied to new mediaItems ingested to the catalog, but will not delete publication rules of existing mediaItems within. Please see below for the method to delete publication rules assigned to mediaItems. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "catalogId",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The catalog Id "
          },
          {
            "name": "publicationRuleId",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The publicationRule Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Delete_Catalog_Publication_RuleResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Delete_Catalog_Publication_RuleError4xx"
            }
          }
        },
        "operationId": "Delete_Catalog_Publication_Rule"
      }
    },
    "/domains/{domainId}/catalog/{catalogId}/publicationRules/{publicationRuleId}": {
      "put": {
        "tags": [
          "Catalog"
        ],
        "summary": "Update Catalog Publication Rule",
        "description": "Update a catalog publication rule. NOTE: Updates made by this method will only be applied to new mediaItems ingested to the catalog, but will not update publication rules of existing mediaItems within. Please see below for a method to update publication rules assigned to individual mediaItems. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The catalog id "
          },
          {
            "name": "publicationRuleId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The publicationRule Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Update_Catalog_Publication_RuleResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Update_Catalog_Publication_RuleError4xx"
            }
          }
        },
        "operationId": "Update_Catalog_Publication_Rule"
      }
    },
    "/domains/{domainId}/publicationRules": {
      "post": {
        "tags": [
          "Domain"
        ],
        "summary": "Create Domain Publication Rule",
        "description": "Retrieves all publicationRuleIds configured on the Domain level. Please review the Content Restriction section of our Once VOD 2.0 Guide for details on what Publication Rules can do and how they are inherited. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain id for your Once account "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Create_Domain_Publication_RuleResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Create_Domain_Publication_RuleError4xx"
            }
          }
        },
        "operationId": "Create_Domain_Publication_Rule"
      },
      "get": {
        "tags": [
          "Domain"
        ],
        "summary": "Get All Domain Publication Rules",
        "description": "Retrieves all publicationRuleIds configured on the Domain level. Please review the Content Restriction section of our Once VOD 2.0 Guide for details on what Publication Rules can do and how they are inherited. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain id for your Once account "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Get_All_Domain_Publication_RulesResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_All_Domain_Publication_RulesError4xx"
            }
          }
        },
        "operationId": "Get_All_Domain_Publication_Rules"
      }
    },
    "/domains/{domainId}/publicationRules/{publicationRuleId}": {
      "delete": {
        "tags": [
          "Domain"
        ],
        "summary": "Delete Domain Publication Rule",
        "description": "Deletes the specified domain publication rule. NOTE: Deleting a domain publication rule will prevent it from being added to new catalogs, but will not delete publication rules of existing catalogs or mediaItems within. Please see below for methods to delete publication rules assigned to catalogs or mediaItems. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain id for your Once account "
          },
          {
            "name": "publicationRuleId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The publicationRule Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Delete_Domain_Publication_RuleResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Delete_Domain_Publication_RuleError4xx"
            }
          }
        },
        "operationId": "Delete_Domain_Publication_Rule"
      },
      "get": {
        "tags": [
          "Domain"
        ],
        "summary": "Get Domain Publication Rule Details",
        "description": "Retrieves all publicationRuleIds configured on the Domain level. Please review the Content Restriction section of our Once VOD 2.0 Guide for details on what Publication Rules can do and how they are inherited. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain id for your Once account "
          },
          {
            "name": "publicationRuleId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The publicationRule Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Get_Domain_Publication_Rule_DetailsResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_Domain_Publication_Rule_DetailsError4xx"
            }
          }
        },
        "operationId": "Get_Domain_Publication_Rule_Details"
      },
      "put": {
        "tags": [
          "Domain"
        ],
        "summary": "Update Domain Publication Rule",
        "description": "Retrieves all publicationRuleIds configured on the Domain level. Please review the Content Restriction section of our Once VOD 2.0 Guide for details on what Publication Rules can do and how they are inherited. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain id for your Once account "
          },
          {
            "name": "publicationRuleId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The publicationRule Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Update_Domain_Publication_RuleResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Update_Domain_Publication_RuleError4xx"
            }
          }
        },
        "operationId": "Update_Domain_Publication_Rule"
      }
    },
    "/domains/{domainId}/timedText/{timedTextId}": {
      "delete": {
        "tags": [
          "Domain"
        ],
        "summary": "Delete Timed Text Asset",
        "description": "Deletes a timed text asset for captions and subtitles for a specified media item. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain id for your Once account "
          },
          {
            "name": "timedTextId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The id for the timed text asset "
          },
          {
            "name": "catalogId",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The id for the catalog that the media item belongs to "
          },
          {
            "name": "mediaItemId",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "The id for the media item "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Delete_Timed_Text_AssetResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Delete_Timed_Text_AssetError4xx"
            }
          }
        },
        "operationId": "Delete_Timed_Text_Asset"
      },
      "get": {
        "tags": [
          "Domain"
        ],
        "summary": "Get Domain Timed Text Asset",
        "description": "Retrieves details of a timed text asset for captions and subtitles. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain id for your Once account "
          },
          {
            "name": "timedTextId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The id for the timed text asset "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/results"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_Domain_Timed_Text_AssetError4xx"
            }
          }
        },
        "operationId": "Get_Domain_Timed_Text_Asset"
      }
    },
    "/domains/{domainId}/renditions": {
      "get": {
        "tags": [
          "Domain"
        ],
        "summary": "Get All Domain Renditions",
        "description": "Retrieves all Transcoding Renditions available in your domain (note, new videos will be assigned renditions based on the configured Catalog Renditions). ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain id for your Once account "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/results"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_All_Domain_RenditionsError4xx"
            }
          }
        },
        "operationId": "Get_All_Domain_Renditions"
      }
    },
    "/domains/{domainId}/timedText": {
      "get": {
        "tags": [
          "Domain"
        ],
        "summary": "Get All Domain Timed Text",
        "description": "Retrieves all timed text for captions and subtitles for the domain. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain id for your Once account "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/results"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_All_Domain_Timed_TextError4xx"
            }
          }
        },
        "operationId": "Get_All_Domain_Timed_Text"
      }
    },
    "/domains/{domainId}": {
      "get": {
        "tags": [
          "Domain"
        ],
        "summary": "Get Domain Details",
        "description": "Retrieves domain name and domainId. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain id for your Once account "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Get_Domain_DetailsResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_Domain_DetailsError4xx"
            }
          }
        },
        "operationId": "Get_Domain_Details"
      }
    },
    "/domains/{domainId}/renditions/{renditionId}": {
      "get": {
        "tags": [
          "Domain"
        ],
        "summary": "Get Domain Rendition Details",
        "description": "Retrieves video and audio encoding settings for the specified renditionId. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain id for your Once account "
          },
          {
            "name": "renditionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The id for the rendition "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Get_Domain_Rendition_DetailsResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_Domain_Rendition_DetailsError4xx"
            }
          }
        },
        "operationId": "Get_Domain_Rendition_Details"
      }
    },
    "/domains/{domainId}/catalog/{catalogId}/mediaItems/{mediaItemId}/publicationRules": {
      "post": {
        "tags": [
          "MediaItem"
        ],
        "summary": "Create MediaItem Publication Rule",
        "description": "Create a mediaItem publication rule. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The catalog Id "
          },
          {
            "name": "mediaItemId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mediaItem Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Create_MediaItem_Publication_RuleResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Create_MediaItem_Publication_RuleError4xx"
            }
          }
        },
        "operationId": "Create_MediaItem_Publication_Rule"
      }
    },
    "/domains/{domainId}/catalogs/{catalogId}/mediaItems/{mediaItemId}/timedText": {
      "post": {
        "tags": [
          "MediaItem"
        ],
        "summary": "Create Media Item Timed Text Asset",
        "description": "Creates a timed text asset for captions and subtitles for a specified media item. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain id for your Once account "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The id for the catalog that the media item belongs to "
          },
          {
            "name": "mediaItemId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The id for the media item "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Create_Media_Item_Timed_Text_AssetResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Create_Media_Item_Timed_Text_AssetError4xx"
            }
          }
        },
        "operationId": "Create_Media_Item_Timed_Text_Asset"
      },
      "get": {
        "tags": [
          "MediaItem"
        ],
        "summary": "Get Media Item Timed Text Asset",
        "description": "Retrieves the timed text asset for captions and subtitles for a specified media item. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain id for your Once account "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The id for the catalog that the media item belongs to "
          },
          {
            "name": "mediaItemId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The id for the media item "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/results"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_Media_Item_Timed_Text_AssetError4xx"
            }
          }
        },
        "operationId": "Get_Media_Item_Timed_Text_Asset"
      }
    },
    "/domains/{domainId}/catalogs/{catalogId}/mediaItems/{mediaItemId}": {
      "delete": {
        "tags": [
          "MediaItem"
        ],
        "summary": "Delete Media Item",
        "description": "Returns the essential information of the media item. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The catalog Id "
          },
          {
            "name": "mediaItemId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mediaItem Id (you can substitute foreignKey for mediaItemId) "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Delete_Media_ItemResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Delete_Media_ItemError4xx"
            }
          }
        },
        "operationId": "Delete_Media_Item"
      },
      "get": {
        "tags": [
          "MediaItem"
        ],
        "summary": "Get MediaItem Details",
        "description": "Retrieves details of a specified mediaItem. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The catalog Id "
          },
          {
            "name": "mediaItemId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mediaItem Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Get_MediaItem_DetailsResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_MediaItem_DetailsError4xx"
            }
          }
        },
        "operationId": "Get_MediaItem_Details"
      },
      "post": {
        "tags": [
          "MediaItem"
        ],
        "summary": "Update MediaItem",
        "description": "Updates the mediaItem to reflect the request body. NOTE: All mediaItem fields must be present in your request, not just those you wish to update. Existing fields with missing values in the update request will be overwritten with null values. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The catalog Id "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The catalog Id "
          },
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Update_MediaItemResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Update_MediaItemError4xx"
            }
          }
        },
        "operationId": "Update_MediaItem"
      }
    },
    "/domains/{domainId}/catalogs/{catalogId}/mediaItems/{mediaItemId}/publicationRules/{publicationRuleId}": {
      "delete": {
        "tags": [
          "MediaItem"
        ],
        "summary": "Delete MediaItem Publication Rule",
        "description": "Deletes the specified mediaItem publication rule. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The catalog Id "
          },
          {
            "name": "mediaItemId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mediaItem Id "
          },
          {
            "name": "publicationRuleId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The publicationRule Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Delete_MediaItem_Publication_RuleResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Delete_MediaItem_Publication_RuleError4xx"
            }
          }
        },
        "operationId": "Delete_MediaItem_Publication_Rule"
      },
      "get": {
        "tags": [
          "MediaItem"
        ],
        "summary": "Get MediaItem Publication Rule Details",
        "description": "Retrieves configuration of a mediaItem-level publication rule. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The catalog Id "
          },
          {
            "name": "mediaItemId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mediaItem Id "
          },
          {
            "name": "publicationRuleId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The publicationRule Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Get_MediaItem_Publication_Rule_DetailsResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_MediaItem_Publication_Rule_DetailsError4xx"
            }
          }
        },
        "operationId": "Get_MediaItem_Publication_Rule_Details"
      }
    },
    "/domains/{domainId}/catalogs/{catalogId}/mediaItems/{mediaItemId}/publicationRules": {
      "get": {
        "tags": [
          "MediaItem"
        ],
        "summary": "Get All MediaItem Publication Rules",
        "description": "Retrieves all publicationRuleIds assigned to a mediaItem.  Please review the Content Restriction section of our Once VOD 2.0 Guide for details on what Publication Rules can do and how they are inherited. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The catalog Id "
          },
          {
            "name": "mediaItemId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mediaItem Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Get_All_MediaItem_Publication_RulesResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_All_MediaItem_Publication_RulesError4xx"
            }
          }
        },
        "operationId": "Get_All_MediaItem_Publication_Rules"
      }
    },
    "/domains/{domainId}/catalogs/{catalogId}/mediaItems": {
      "get": {
        "tags": [
          "MediaItem"
        ],
        "summary": "Get All MediaItems In Catalog",
        "description": "Returns a collection of all media items within a catalog. This method fetches 20 media items per page, returns the totalResult to indicate the total number of media items and provides the previous or next page requests within the body. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "TThe catalog Id "
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "number",
            "description": "The number of items to return for the request "
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "number",
            "description": "The set of items (based on pageSize) to return "
          },
          {
            "name": "title",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter to media items that have title substring. E.g. title=foo could return media items with title &quot;foo&quot;, &quot;foobar&quot;, &quot;foorific&quot; "
          },
          {
            "name": "foreignKey",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter to media items that have foreign key substring. E.g. foreignKey=foo could return media items with foreign key &quot;foo&quot;, &quot;foobar&quot;, &quot;foorific&quot; "
          },
          {
            "name": "sortField",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter to applications that have name substring. E.g. name=foo could return applications named &quot;foo&quot;, &quot;foobar&quot;, &quot;foorific&quot; "
          },
          {
            "name": "sortDirection",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort ascending or descending. "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/results"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Get_All_MediaItems_In_CatalogError4xx"
            }
          }
        },
        "operationId": "Get_All_MediaItems_In_Catalog"
      }
    },
    "/domains/{domainId}/catalog/{catalogId}/mediaItems/{mediaItemId}/publicationRules/{publicationRuleId}": {
      "put": {
        "tags": [
          "MediaItem"
        ],
        "summary": "Update MediaItem Publication Rule",
        "description": "Update a mediaItem publication rule. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain Id "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The catalog Id "
          },
          {
            "name": "mediaItemId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The mediaItem Id "
          },
          {
            "name": "publicationRuleId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The publicationRule Id "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Update_MediaItem_Publication_RuleResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Update_MediaItem_Publication_RuleError4xx"
            }
          }
        },
        "operationId": "Update_MediaItem_Publication_Rule"
      }
    },
    "/domains/{domainId}/catalogs/{catalogId}/mediaItems/{mediaItemId}/timedText/{timedTextId}": {
      "post": {
        "tags": [
          "MediaItem"
        ],
        "summary": "Update Media Item Timed Text Asset",
        "description": "Updates a timed text asset for captions and subtitles for a specified media item. ",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The domain id for your Once account "
          },
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The id for the catalog that the media item belongs to "
          },
          {
            "name": "mediaItemId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The id for the media item "
          },
          {
            "name": "timedTextId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The id for the timed text asset "
          },
          {
            "name": "X-BC-ONCE-API-KEY",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ": {api_key} "
          }
        ],
        "responses": {
          "Response Fields": {
            "description": "Response Fields",
            "schema": {
              "$ref": "#/definitions/Update_Update_Item_Timed_Text_AssetResponseFields"
            }
          },
          "Error 4xx": {
            "description": "Error 4xx",
            "schema": {
              "$ref": "#/definitions/Update_Update_Item_Timed_Text_AssetError4xx"
            }
          }
        },
        "operationId": "Update_Update_Item_Timed_Text_Asset"
      }
    },
    "": {
      "": {
        "tags": [
          "_Users_rcrooks_git_Brightcove_API_References_once_media_management_api_v1_doc_main_js"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "Success 200": {
            "description": "Success 200"
          }
        },
        "operationId": ""
      }
    }
  },
  "definitions": {
    "Create_Ad_Decisioning_ServerResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The adServerId "
        },
        "name": {
          "type": "string",
          "description": "The adServerâ€™s name "
        },
        "baseURL": {
          "type": "url",
          "description": "The adServerâ€™s base URL "
        },
        "domainId": {
          "type": "string",
          "description": "Each adServerâ€™s parent domainId "
        },
        "variables": {
          "type": "object",
          "description": "An object set of query string key/value pairs to be inserted/appended to the base URL at request time. Response variable order may not match your original input, this is expected and will not affect ad tag performance. ",
          "$ref": "#/definitions/variables"
        }
      },
      "required": [
        "id",
        "name",
        "baseURL",
        "domainId",
        "variables"
      ]
    },
    "Create_Ad_Decisioning_ServerError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "results": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Each mediaItemâ€™s Id "
        },
        "name": {
          "type": "string",
          "description": "Each rendition name "
        },
        "baseURL": {
          "type": "url",
          "description": "Each adServerâ€™s base URL "
        },
        "domainId": {
          "type": "string",
          "description": "Each mediaItemâ€™s parent domain Id "
        },
        "languages": {
          "type": "array",
          "description": "An array of ISO 639-1 two-letter language codes for the captions or subtitles - for example: [&quot;en&quot;, &quot;fr&quot;] ",
          "items": {
            "type": "string"
          }
        },
        "format": {
          "type": "string",
          "description": "The format of the captions or subtitles, such as SRT "
        },
        "version": {
          "type": "number",
          "description": "The version of the captions or subtitles "
        },
        "default": {
          "type": "boolean",
          "description": "If true, will be assigned to new catalogs by default "
        },
        "timedTextType": {
          "type": "string",
          "description": "The type  of the timed text: CAPTION or SUBTITLE "
        },
        "catalogId": {
          "type": "string",
          "description": "Each mediaItemâ€™s parent catalog Id "
        },
        "isAd": {
          "type": "boolean",
          "description": "(Internal use only) "
        },
        "foreignKey": {
          "type": "string",
          "description": "Each mediaItemâ€™s foreignKey "
        },
        "title": {
          "type": "string",
          "description": "Each mediaItemâ€™s title "
        },
        "draftVersion": {
          "type": "number",
          "description": "The iteration of that specific mediaItem (will increment if a new version of the video is ingested) "
        },
        "publishedVersion": {
          "type": "number",
          "description": "The iteration of that specific mediaItem (will increment if a new version of the video is ingested) "
        }
      },
      "required": [
        "id",
        "name",
        "baseURL",
        "domainId",
        "languages",
        "format",
        "version",
        "default",
        "timedTextType",
        "catalogId",
        "isAd",
        "foreignKey",
        "title",
        "draftVersion",
        "publishedVersion"
      ]
    },
    "Get_All_Ad_Decisioning_ServersResponseFields": {
      "properties": {
        "prev": {
          "type": "url",
          "description": "URL to GET the previous adServer result set (if necessary) "
        },
        "next": {
          "type": "url",
          "description": "URL to GET the next adServer result set (if necessary) "
        },
        "totalResults": {
          "type": "number",
          "description": "The total number of adServer in the domain "
        }
      },
      "required": [
        "prev",
        "next",
        "totalResults"
      ]
    },
    "Get_All_Ad_Decisioning_ServersError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Delete_Ad_Decisioning_ServerResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The adServerId which has been deleted "
        }
      },
      "required": [
        "id"
      ]
    },
    "Delete_Ad_Decisioning_ServerError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Get_Ad_Decisioning_Server_DetailsResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The adServerId "
        },
        "name": {
          "type": "string",
          "description": "The adServerâ€™s name "
        },
        "baseURL": {
          "type": "url",
          "description": "The adServerâ€™s base URL "
        },
        "domainId": {
          "type": "string",
          "description": "The adServerâ€™s parent domainId "
        },
        "variables": {
          "type": "object",
          "description": "An object set of query string key/value pairs which will be inserted/appended to the base URL at request time ",
          "$ref": "#/definitions/variables"
        }
      },
      "required": [
        "id",
        "name",
        "baseURL",
        "domainId",
        "variables"
      ]
    },
    "Get_Ad_Decisioning_Server_DetailsError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Update_Ad_Decisioning_ServerResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The adServerId "
        },
        "name": {
          "type": "string",
          "description": "The adServerâ€™s name "
        },
        "baseURL": {
          "type": "url",
          "description": "The adServerâ€™s base URL "
        },
        "domainId": {
          "type": "string",
          "description": "Each adServerâ€™s parent domainId "
        },
        "variables": {
          "type": "object",
          "description": "An object set of query string key/value pairs to be inserted/appended to the base URL at request time. Response variable order may not match your original input, this is expected and will not affect ad tag performance. ",
          "$ref": "#/definitions/variables"
        }
      },
      "required": [
        "id",
        "name",
        "baseURL",
        "domainId",
        "variables"
      ]
    },
    "Update_Ad_Decisioning_ServerError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Add_or_Replace_Application_Ad_ConfigurationResponseFieldsExample1": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The application Id "
        },
        "name": {
          "type": "string",
          "description": "The application&#39;s name "
        },
        "domainId": {
          "type": "string",
          "description": "The applicationâ€™s parent domainId "
        },
        "adConfig": {
          "type": "object",
          "description": "An object set of ads configured to the application ",
          "$ref": "#/definitions/adConfig"
        },
        "preRollAdCount": {
          "type": "string",
          "description": "The number of single VAST ads to be requested for the preRoll position "
        },
        "midRollAdCount": {
          "type": "string",
          "description": "The number of single VAST ads to be requested for the miodRoll position "
        },
        "postRollAdCount": {
          "type": "string",
          "description": "The number of single VAST ads to be requested for the postRoll position "
        }
      },
      "required": [
        "id",
        "name",
        "domainId",
        "adConfig",
        "preRollAdCount",
        "midRollAdCount",
        "postRollAdCount"
      ]
    },
    "adconfig": {
      "properties": {
        "preRoll": {
          "type": "object",
          "description": "A single VAST adConfig for the preRoll slot ",
          "$ref": "#/definitions/adconfig.preRoll"
        },
        "midRoll": {
          "type": "object",
          "description": "A single VAST adConfig for the midRoll slot ",
          "$ref": "#/definitions/adconfig.midRoll"
        },
        "postRoll": {
          "type": "object",
          "description": "A single VAST adConfig for the postRoll slot ",
          "$ref": "#/definitions/adconfig.postRoll"
        }
      },
      "required": [
        "preRoll",
        "midRoll",
        "postRoll"
      ]
    },
    "adconfig.preRoll": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The adConfigId "
        },
        "name": {
          "type": "string",
          "description": "The adConfigâ€™s name "
        },
        "adServerId": {
          "type": "string",
          "description": "The adServerId which will be requested for a single VAST ad "
        },
        "adserverName": {
          "type": "string",
          "description": "The adServerâ€™s name "
        },
        "adPosition": {
          "type": "string",
          "description": "The position into which the ad will be inserted (preRoll) "
        }
      },
      "required": [
        "id",
        "name",
        "adServerId",
        "adserverName",
        "adPosition"
      ]
    },
    "adconfig.midRoll": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The adConfigId "
        },
        "name": {
          "type": "string",
          "description": "The adConfigâ€™s name "
        },
        "adServerId": {
          "type": "string",
          "description": "The adServerId which will be requested for a single VAST ad "
        },
        "adserverName": {
          "type": "string",
          "description": "The adServerâ€™s name "
        },
        "adPosition": {
          "type": "string",
          "description": "The position into which the ad will be inserted (midRoll) "
        }
      },
      "required": [
        "id",
        "name",
        "adServerId",
        "adserverName",
        "adPosition"
      ]
    },
    "adconfig.postRoll": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The adConfigId "
        },
        "name": {
          "type": "string",
          "description": "The adConfigâ€™s name "
        },
        "adServerId": {
          "type": "string",
          "description": "The adServerId which will be requested for a single VAST ad "
        },
        "adserverName": {
          "type": "string",
          "description": "The adServerâ€™s name "
        },
        "adPosition": {
          "type": "string",
          "description": "The position into which the ad will be inserted (postRoll) "
        }
      },
      "required": [
        "id",
        "name",
        "adServerId",
        "adserverName",
        "adPosition"
      ]
    },
    "Add_or_Replace_Application_Ad_ConfigurationResponseFieldsExample2": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The application Id "
        },
        "name": {
          "type": "string",
          "description": "The application&#39;s name "
        },
        "domainId": {
          "type": "string",
          "description": "The application&#39;s parent domainId "
        },
        "adConfig": {
          "type": "object",
          "description": "An object set of ads configured to the application ",
          "$ref": "#/definitions/adConfig"
        },
        "preRollAdCount": {
          "type": "string",
          "description": "Leave at zero (the adServer will determine number of ads returned for preRoll position) "
        },
        "midollAdCount": {
          "type": "string",
          "description": "Leave at zero (the adServer will determine number of ads returned for midRoll position) "
        },
        "postRollAdCount": {
          "type": "string",
          "description": "Leave at zero (the adServer will determine number of ads returned for postRoll position) "
        }
      },
      "required": [
        "id",
        "name",
        "domainId",
        "adConfig",
        "preRollAdCount",
        "midollAdCount",
        "postRollAdCount"
      ]
    },
    "adConfig": {
      "properties": {
        "ad": {
          "type": "object",
          "description": "An adConfig where a single request will return a full, multiple ad load ",
          "$ref": "#/definitions/adConfig.ad"
        },
        "preRoll": {
          "type": "object",
          "description": "A single VAST adConfig for the preRoll slot ",
          "$ref": "#/definitions/adConfig.preRoll"
        },
        "midRoll": {
          "type": "object",
          "description": "A single VAST adConfig for the midRoll slot ",
          "$ref": "#/definitions/adConfig.midRoll"
        },
        "postRoll": {
          "type": "object",
          "description": "A single VAST adConfig for the postRoll slot ",
          "$ref": "#/definitions/adConfig.postRoll"
        }
      },
      "required": [
        "ad",
        "preRoll",
        "midRoll",
        "postRoll"
      ]
    },
    "adConfig.ad": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The adConfigId "
        },
        "name": {
          "type": "string",
          "description": "The adConfigâ€™s name "
        },
        "adServerId": {
          "type": "string",
          "description": "The adServerId which will be requested for the multiple ad load "
        },
        "adServerName": {
          "type": "string",
          "description": "The adServerâ€™s name "
        },
        "adPosition": {
          "type": "string",
          "description": "The multiple adServer configuration type (dfp or smartxml) "
        },
        "adserverName": {
          "type": "string",
          "description": "The adServerâ€™s name "
        }
      },
      "required": [
        "id",
        "name",
        "adServerId",
        "adServerName",
        "adPosition",
        "adserverName"
      ]
    },
    "Add_or_Replace_Application_Ad_ConfigurationError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Delete_Application_Ad_ConfigurationsResponseFields": {
      "properties": {
        "id": {
          "type": "array",
          "description": "An array of adConfigId(s) which have been deleted ",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "Delete_Application_Ad_ConfigurationsError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "preRoll": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The adConfigId "
        },
        "name": {
          "type": "string",
          "description": "The adConfigId "
        },
        "adServerId": {
          "type": "string",
          "description": "The adServerId which will be requested for a single VAST ad "
        },
        "adserverName": {
          "type": "string",
          "description": "The preRoll ad configuration ad server name (single ad config) "
        },
        "adPosition": {
          "type": "string",
          "description": "The position into which the ad will be inserted (preRoll) "
        }
      },
      "required": [
        "id",
        "name",
        "adServerId",
        "adserverName",
        "adPosition"
      ]
    },
    "Get_All_Application_Ad_ConfigurationsResponseFieldsExample1": {
      "properties": {
        "midRoll": {
          "type": "object",
          "description": "A single VAST adConfig for the midRoll slot ",
          "$ref": "#/definitions/midRoll"
        }
      },
      "required": [
        "midRoll"
      ]
    },
    "midRoll": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The adConfigId "
        },
        "name": {
          "type": "string",
          "description": "The adConfigId "
        },
        "adServerId": {
          "type": "string",
          "description": "The adServerId which will be requested for a single VAST ad "
        },
        "adserverName": {
          "type": "string",
          "description": "The adServerâ€™s name "
        },
        "adPosition": {
          "type": "string",
          "description": "The position into which the ad will be inserted (midRoll) "
        }
      },
      "required": [
        "id",
        "name",
        "adServerId",
        "adserverName",
        "adPosition"
      ]
    },
    "ad": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The adConfigId "
        },
        "name": {
          "type": "string",
          "description": "The adConfigId "
        },
        "adServerId": {
          "type": "string",
          "description": "The adServerId which will be requested for a single VAST ad "
        },
        "adserverName": {
          "type": "string",
          "description": "The adServerâ€™s name "
        },
        "adPosition": {
          "type": "string",
          "description": "The multiple adServer configuration type (dfp or smartxml) "
        }
      },
      "required": [
        "id",
        "name",
        "adServerId",
        "adserverName",
        "adPosition"
      ]
    },
    "Get_All_Application_Ad_ConfigurationsError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Create_ApplicationResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The application Id "
        },
        "name": {
          "type": "string",
          "description": "The application&#39;s name "
        },
        "domainId": {
          "type": "string",
          "description": "The application&#39;s parent domainId "
        },
        "adConfig": {
          "type": "object",
          "description": "Will remain null until adConfig has been added (see methods below) ",
          "$ref": "#/definitions/adConfig"
        },
        "preRollAdCoung": {
          "type": "number",
          "description": "The number of single VAST ads to be requested for the preRoll position "
        },
        "midRollAdCoung": {
          "type": "number",
          "description": "The number of single VAST ads to be requested for the midRoll position "
        },
        "postRollAdCoung": {
          "type": "number",
          "description": "The number of single VAST ads to be requested for the postRoll position "
        }
      },
      "required": [
        "id",
        "name",
        "domainId",
        "adConfig",
        "preRollAdCoung",
        "midRollAdCoung",
        "postRollAdCoung"
      ]
    },
    "Create_ApplicationError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Get_All_ApplicationsResponseFields": {
      "properties": {
        "prev": {
          "type": "url",
          "description": "URL to GET the previous application result set (if necessary) "
        },
        "next": {
          "type": "url",
          "description": "URL to GET the next application result set (if necessary) "
        },
        "totalResults": {
          "type": "number",
          "description": "The total number of applications in the domain "
        }
      },
      "required": [
        "prev",
        "next",
        "totalResults"
      ]
    },
    "Get_All_ApplicationsError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Delete_ApplicationResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The application Id "
        }
      },
      "required": [
        "id"
      ]
    },
    "Delete_ApplicationError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Get_Application_DetailsResponseFieldsExample1": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The application Id "
        },
        "name": {
          "type": "string",
          "description": "The application&#39;s name "
        },
        "domainId": {
          "type": "string",
          "description": "The application&#39;s parent domainId "
        },
        "adConfig": {
          "type": "object",
          "description": "An object set of ads configured to the application ",
          "$ref": "#/definitions/adConfig"
        },
        "preRollAdCount": {
          "type": "number",
          "description": "The number of single VAST ads to be requested for the preRoll position "
        },
        "midRollAdCount": {
          "type": "number",
          "description": "The number of single VAST ads to be requested for the midRoll position "
        },
        "postRollAdCount": {
          "type": "number",
          "description": "The number of single VAST ads to be requested for the posRoll position "
        }
      },
      "required": [
        "id",
        "name",
        "domainId",
        "adConfig",
        "preRollAdCount",
        "midRollAdCount",
        "postRollAdCount"
      ]
    },
    "adConfig.preRoll": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The adConfigId "
        },
        "name": {
          "type": "string",
          "description": "The adConfigâ€™s name "
        },
        "adServerId": {
          "type": "string",
          "description": "The adServerId which will be requested for a single VAST ad "
        },
        "adserverName": {
          "type": "string",
          "description": "The adServerâ€™s name "
        },
        "adPosition": {
          "type": "string",
          "description": "The position into which the ad will be inserted (preRoll) "
        }
      },
      "required": [
        "id",
        "name",
        "adServerId",
        "adserverName",
        "adPosition"
      ]
    },
    "adConfig.midRoll": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The adConfigId "
        },
        "name": {
          "type": "string",
          "description": "The adConfigâ€™s name "
        },
        "adServerId": {
          "type": "string",
          "description": "The adServerId which will be requested for a single VAST ad "
        },
        "adserverName": {
          "type": "string",
          "description": "The adServerâ€™s name "
        },
        "adPosition": {
          "type": "string",
          "description": "The position into which the ad will be inserted (midRoll) "
        }
      },
      "required": [
        "id",
        "name",
        "adServerId",
        "adserverName",
        "adPosition"
      ]
    },
    "adConfig.postRoll": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The adConfigId "
        },
        "name": {
          "type": "string",
          "description": "The adConfigâ€™s name "
        },
        "adServerId": {
          "type": "string",
          "description": "The adServerId which will be requested for a single VAST ad "
        },
        "adserverName": {
          "type": "string",
          "description": "The adServerâ€™s name "
        },
        "adPosition": {
          "type": "string",
          "description": "The position into which the ad will be inserted (postRoll) "
        }
      },
      "required": [
        "id",
        "name",
        "adServerId",
        "adserverName",
        "adPosition"
      ]
    },
    "Get_Application_DetailsResponseFieldsExample2": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The application Id "
        },
        "name": {
          "type": "string",
          "description": "The application&#39;s name "
        },
        "domainId": {
          "type": "string",
          "description": "The application&#39;s parent domainId "
        },
        "adConfig": {
          "type": "object",
          "description": "An object set of ads configured to the application ",
          "$ref": "#/definitions/adConfig"
        },
        "preRollAdCount": {
          "type": "number",
          "description": "Leave at zero (the adServer will determine number of ads returned for preRoll position) "
        },
        "midRollAdCount": {
          "type": "number",
          "description": "Leave at zero (the adServer will determine number of ads returned for midRoll position) "
        },
        "postRollAdCount": {
          "type": "number",
          "description": "Leave at zero (the adServer will determine number of ads returned for postRoll position) "
        }
      },
      "required": [
        "id",
        "name",
        "domainId",
        "adConfig",
        "preRollAdCount",
        "midRollAdCount",
        "postRollAdCount"
      ]
    },
    "Get_Application_DetailsError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Update_ApplicationResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The application Id "
        },
        "name": {
          "type": "string",
          "description": "The application&#39;s name "
        },
        "domainId": {
          "type": "string",
          "description": "The application&#39;s parent domainId "
        },
        "adConfig": {
          "type": "object",
          "description": "Will remain null until adConfig has been added (see methods below) ",
          "$ref": "#/definitions/adConfig"
        },
        "preRollAdCoung": {
          "type": "number",
          "description": "The number of single VAST ads to be requested for the preRoll position "
        },
        "midRollAdCoung": {
          "type": "number",
          "description": "The number of single VAST ads to be requested for the midRoll position "
        },
        "postRollAdCoung": {
          "type": "number",
          "description": "The number of single VAST ads to be requested for the postRoll position "
        }
      },
      "required": [
        "id",
        "name",
        "domainId",
        "adConfig",
        "preRollAdCoung",
        "midRollAdCoung",
        "postRollAdCoung"
      ]
    },
    "Update_ApplicationError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Add_Catalog_RenditionResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The new renditionId to be added to the catalog "
        }
      },
      "required": [
        "id"
      ]
    },
    "Add_Catalog_RenditionError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Create_CatalogResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The new catalogId "
        },
        "name": {
          "type": "string",
          "description": "The new catalog name "
        },
        "domainId": {
          "type": "boolean",
          "description": "The new catalogâ€™s parent domainId "
        }
      },
      "required": [
        "id",
        "name",
        "domainId"
      ]
    },
    "Create_CatalogError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Get_All_CatalogsResponseFields": {
      "properties": {
        "prev": {
          "type": "url",
          "description": "URL to get the previous result set (null if there is none) "
        },
        "next": {
          "type": "url",
          "description": "URL to get the next result set (null if there is none) "
        },
        "total": {
          "type": "number",
          "description": "number of results "
        }
      },
      "required": [
        "prev",
        "next",
        "total"
      ]
    },
    "Get_All_CatalogsError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Update_Catalog_NameResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The update catalogId "
        },
        "name": {
          "type": "string",
          "description": "The updated catalog name "
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "Update_Catalog_NameError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Create_Catalog_Publication_RuleResponseFields": {
      "properties": {
        "startDate": {
          "type": "number",
          "description": "Epoch time (in seconds) when publication rule becomes effective, "
        },
        "endDate": {
          "type": "number",
          "description": "Epoch time (in seconds) when publication rule expires, "
        },
        "clientFilters": {
          "type": "array",
          "description": "Array of client-based filters, ",
          "items": {
            "$ref": "#/definitions/clientFilters"
          }
        },
        "countryRules": {
          "type": "array",
          "description": "Array of country-based filters, ",
          "items": {
            "$ref": "#/definitions/countryRules"
          }
        },
        "id": {
          "type": "string",
          "description": "The publicationRule Id "
        },
        "domain": {
          "type": "string",
          "description": "The publication ruleâ€™s parent domainId "
        },
        "catalog": {
          "type": "string",
          "description": "The publication ruleâ€™s parent catalogId "
        }
      },
      "required": [
        "startDate",
        "endDate",
        "clientFilters",
        "countryRules",
        "id",
        "domain",
        "catalog"
      ]
    },
    "clientFilters": {
      "properties": {
        "variableName": {
          "type": "string",
          "description": "The type of client variable being filtered: (IpAddress, UserAgent, ReferringHost), "
        },
        "value": {
          "type": "string",
          "description": "A string against which requests will be filtered, "
        },
        "filterType": {
          "type": "string",
          "description": "The method of filtering against the value string: (Equals, NotEquals, In, NotIn, Contains, NotContains, StartsWith, NotStartsWith, EndsWith, NotEndsWith), "
        },
        "isDenied": {
          "type": "boolean",
          "description": "True: All other values will be permitted; False: Only this value will be permitted "
        }
      },
      "required": [
        "variableName",
        "value",
        "filterType",
        "isDenied"
      ]
    },
    "countryRules": {
      "properties": {
        "countryCode": {
          "type": "string",
          "description": "ISO 3166-1 alpha-2 country code being filtered, "
        },
        "isDenied": {
          "type": "boolean",
          "description": "True: All other values will be permitted; False: Only this value will be permitted "
        }
      },
      "required": [
        "countryCode",
        "isDenied"
      ]
    },
    "Create_Catalog_Publication_RuleError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Delete_Catalog_RenditionResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The renditionId removed from the catalog rendition set "
        }
      },
      "required": [
        "id"
      ]
    },
    "Delete_Catalog_RenditionError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Get_Catalog_Rendition_DetailsResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The renditionId "
        },
        "name": {
          "type": "string",
          "description": "The rendition name "
        },
        "width": {
          "type": "number",
          "description": "The frame width for the rendition in pixels "
        },
        "height": {
          "type": "number",
          "description": "The frame height for the rendition in pixels "
        },
        "videoBitRate": {
          "type": "number",
          "description": "The video bitrate in kbps "
        },
        "audioBitRate": {
          "type": "number",
          "description": "The audio bitrate in kbps "
        },
        "codecsValue": {
          "type": "string",
          "description": "The video and audio codecs "
        }
      },
      "required": [
        "id",
        "name",
        "width",
        "height",
        "videoBitRate",
        "audioBitRate",
        "codecsValue"
      ]
    },
    "Get_Catalog_Rendition_DetailsError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Replace_All_Catalog_RenditionsResponseFields": {
      "properties": {
        "Each": {
          "type": "string",
          "description": "renditionId to be assigned to catalog "
        }
      },
      "required": [
        "Each"
      ]
    },
    "Replace_All_Catalog_RenditionsError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Get_All_Catalog_Publication_RulesResponseFields": {
      "properties": {
        "publicationRuleIds": {
          "type": "array",
          "description": "A comma-separated array of publicationRuleIds assigned to the catalog (will be inherited by mediaItems ingested to the catalog) ",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "publicationRuleIds"
      ]
    },
    "Get_All_Catalog_Publication_RulesError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Get_All_Catalog_RenditionsError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Get_Catalog_DetailsResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The catalog Id "
        },
        "name": {
          "type": "string",
          "description": "The catalog name "
        },
        "domainId": {
          "type": "boolean",
          "description": "The catalogâ€™s parent domainId "
        }
      },
      "required": [
        "id",
        "name",
        "domainId"
      ]
    },
    "Get_Catalog_DetailsError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Get_Catalog_Publication_Rule_DetailsResponseFields": {
      "properties": {
        "startDate": {
          "type": "number",
          "description": "Epoch time (in seconds) when publication rule becomes effective "
        },
        "endDate": {
          "type": "number",
          "description": "Epoch time (in seconds) when publication rule expires "
        },
        "clientFilters": {
          "type": "array",
          "description": "Array of client-based filters ",
          "items": {
            "$ref": "#/definitions/clientFilters"
          }
        },
        "countryRules": {
          "type": "array",
          "description": "Array of country-based filters ",
          "items": {
            "$ref": "#/definitions/countryRules"
          }
        },
        "id": {
          "type": "string",
          "description": "The publicationRule Id "
        },
        "domain": {
          "type": "string",
          "description": "The publication ruleâ€™s parent domainId "
        },
        "catalog": {
          "type": "string",
          "description": "The publication ruleâ€™s parent catalogId "
        }
      },
      "required": [
        "startDate",
        "endDate",
        "clientFilters",
        "countryRules",
        "id",
        "domain",
        "catalog"
      ]
    },
    "Get_Catalog_Publication_Rule_DetailsError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Update_Catalog_Publication_RuleResponseFields": {
      "properties": {
        "startDate": {
          "type": "number",
          "description": "Epoch time (in seconds) when publication rule becomes effective, "
        },
        "endDate": {
          "type": "number",
          "description": "Epoch time (in seconds) when publication rule expires, "
        },
        "clientFilters": {
          "type": "array",
          "description": "Array of client-based filters, ",
          "items": {
            "$ref": "#/definitions/clientFilters"
          }
        },
        "countryRules": {
          "type": "array",
          "description": "Array of country-based filters, ",
          "items": {
            "$ref": "#/definitions/countryRules"
          }
        },
        "id": {
          "type": "string",
          "description": "The publicationRule Id "
        },
        "domain": {
          "type": "string",
          "description": "The publication ruleâ€™s parent domainId "
        },
        "catalog": {
          "type": "string",
          "description": "The publication ruleâ€™s parent catalogId "
        }
      },
      "required": [
        "startDate",
        "endDate",
        "clientFilters",
        "countryRules",
        "id",
        "domain",
        "catalog"
      ]
    },
    "Update_Catalog_Publication_RuleError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Create_Domain_Publication_RuleResponseFields": {
      "properties": {
        "channel": {
          "type": "string",
          "description": "(internal use only) "
        },
        "startDate": {
          "type": "number",
          "description": "Epoch time (in seconds) when publication rule becomes effective "
        },
        "endDate": {
          "type": "number",
          "description": "Epoch time (in seconds) when publication rule expires "
        },
        "clientFilters": {
          "type": "array",
          "description": "Array of client-based filters ",
          "items": {
            "$ref": "#/definitions/clientFilters"
          }
        },
        "countryRules": {
          "type": "array",
          "description": "Array of country-based filters ",
          "items": {
            "$ref": "#/definitions/countryRules"
          }
        },
        "id": {
          "type": "string",
          "description": "The publicationRule Id "
        },
        "domain": {
          "type": "string",
          "description": "The publication ruleâ€™s parent domainId "
        }
      },
      "required": [
        "channel",
        "startDate",
        "endDate",
        "clientFilters",
        "countryRules",
        "id",
        "domain"
      ]
    },
    "Create_Domain_Publication_RuleError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Get_All_Domain_Publication_RulesResponseFields": {
      "properties": {
        "id": {
          "type": "array",
          "description": "A comma-separated array of publicationRuleIds configured at the Domain level (will be inherited by new catalogs) ",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "Get_All_Domain_Publication_RulesError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Delete_Catalog_Publication_RuleResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "id of the publication rule that was deleted "
        }
      },
      "required": [
        "id"
      ]
    },
    "Delete_Catalog_Publication_RuleError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Delete_Domain_Publication_RuleResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "id of the publication rule that was deleted "
        }
      },
      "required": [
        "id"
      ]
    },
    "Delete_Domain_Publication_RuleError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Get_Domain_Publication_Rule_DetailsResponseFields": {
      "properties": {
        "channel": {
          "type": "string",
          "description": "(internal use only) "
        },
        "startDate": {
          "type": "number",
          "description": "Epoch time (in seconds) when publication rule becomes effective "
        },
        "endDate": {
          "type": "number",
          "description": "Epoch time (in seconds) when publication rule expires "
        },
        "clientFilters": {
          "type": "array",
          "description": "Array of client-based filters ",
          "items": {
            "$ref": "#/definitions/clientFilters"
          }
        },
        "countryRules": {
          "type": "array",
          "description": "Array of country-based filters ",
          "items": {
            "$ref": "#/definitions/countryRules"
          }
        },
        "id": {
          "type": "string",
          "description": "The publicationRule Id "
        },
        "domain": {
          "type": "string",
          "description": "The publication ruleâ€™s parent domainId "
        }
      },
      "required": [
        "channel",
        "startDate",
        "endDate",
        "clientFilters",
        "countryRules",
        "id",
        "domain"
      ]
    },
    "Get_Domain_Publication_Rule_DetailsError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Update_Domain_Publication_RuleResponseFields": {
      "properties": {
        "channel": {
          "type": "string",
          "description": "(internal use only) "
        },
        "startDate": {
          "type": "number",
          "description": "Epoch time (in seconds) when publication rule becomes effective "
        },
        "endDate": {
          "type": "number",
          "description": "Epoch time (in seconds) when publication rule expires "
        },
        "clientFilters": {
          "type": "array",
          "description": "Array of client-based filters ",
          "items": {
            "$ref": "#/definitions/clientFilters"
          }
        },
        "countryRules": {
          "type": "array",
          "description": "Array of country-based filters ",
          "items": {
            "$ref": "#/definitions/countryRules"
          }
        },
        "id": {
          "type": "string",
          "description": "The publicationRule Id "
        },
        "domain": {
          "type": "string",
          "description": "The publication ruleâ€™s parent domainId "
        }
      },
      "required": [
        "channel",
        "startDate",
        "endDate",
        "clientFilters",
        "countryRules",
        "id",
        "domain"
      ]
    },
    "Update_Domain_Publication_RuleError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Delete_Timed_Text_AssetResponseFields": {
      "properties": {
        "requestId": {
          "type": "string",
          "description": "The job id for the request "
        }
      },
      "required": [
        "requestId"
      ]
    },
    "Delete_Timed_Text_AssetError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Get_Domain_Timed_Text_AssetError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Get_All_Domain_RenditionsError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Get_All_Domain_Timed_TextResponseFields": {
      "properties": {
        "prev": {
          "type": "string",
          "description": "URL to get the previous 20 results (if any) "
        },
        "next": {
          "type": "string",
          "description": "URL to get the next 20 results (if any) "
        },
        "totalResults": {
          "type": "number",
          "description": "The total number of results (will be null unless there are more than 20 results) "
        }
      },
      "required": [
        "prev",
        "next",
        "totalResults"
      ]
    },
    "Get_All_Domain_Timed_TextError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Get_Domain_DetailsResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The domain Id "
        },
        "name": {
          "type": "string",
          "description": "The domain name "
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "Get_Domain_DetailsError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Get_Domain_Rendition_DetailsResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The rendition Id "
        },
        "name": {
          "type": "string",
          "description": "The rendition name "
        },
        "width": {
          "type": "number",
          "description": "The frame width in pixels "
        },
        "height": {
          "type": "number",
          "description": "The frame height in pixels "
        },
        "videoBitRate": {
          "type": "number",
          "description": "The video bitrate in kbps "
        },
        "audioBitRate": {
          "type": "number",
          "description": "The audio bitrate in kbps "
        },
        "codecsValue": {
          "type": "number",
          "description": "The video and audio codecs "
        }
      },
      "required": [
        "id",
        "name",
        "width",
        "height",
        "videoBitRate",
        "audioBitRate",
        "codecsValue"
      ]
    },
    "Get_Domain_Rendition_DetailsError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Create_MediaItem_Publication_RuleResponseFields": {
      "properties": {
        "startDate": {
          "type": "number",
          "description": "Epoch time (in seconds) when publication rule becomes effective, "
        },
        "endDate": {
          "type": "number",
          "description": "Epoch time (in seconds) when publication rule expires, "
        },
        "clientFilters": {
          "type": "array",
          "description": "Array of client-based filters, ",
          "items": {
            "$ref": "#/definitions/clientFilters"
          }
        },
        "countryRules": {
          "type": "array",
          "description": "Array of country-based filters, ",
          "items": {
            "$ref": "#/definitions/countryRules"
          }
        },
        "id": {
          "type": "string",
          "description": "The publicationRule Id "
        },
        "domain": {
          "type": "string",
          "description": "The publication ruleâ€™s parent domain Id "
        },
        "catalog": {
          "type": "string",
          "description": "The publication ruleâ€™s parent catalog Id "
        },
        "mediaItem": {
          "type": "string",
          "description": "The publication ruleâ€™s parent mediaItem Id "
        }
      },
      "required": [
        "startDate",
        "endDate",
        "clientFilters",
        "countryRules",
        "id",
        "domain",
        "catalog",
        "mediaItem"
      ]
    },
    "Create_MediaItem_Publication_RuleError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Create_Media_Item_Timed_Text_AssetResponseFields": {
      "properties": {
        "requestId": {
          "type": "string",
          "description": "The job id for the request "
        }
      },
      "required": [
        "requestId"
      ]
    },
    "Create_Media_Item_Timed_Text_AssetError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Get_Media_Item_Timed_Text_AssetError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Delete_MediaItemResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The mediaItem Id that was deleted "
        }
      },
      "required": [
        "id"
      ]
    },
    "Delete_MediaItemError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Delete_Media_ItemResponseFields": {
      "properties": {
        "delete": {
          "type": "string",
          "description": "Value will contain The mediaItem Id the message &quot;scheduled for deletion&quot; "
        }
      },
      "required": [
        "delete"
      ]
    },
    "Delete_Media_ItemError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Get_MediaItem_DetailsResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The mediaItem Id "
        },
        "catalogId": {
          "type": "string",
          "description": "The mediaItemâ€™s parent catalog Id "
        },
        "domainId": {
          "type": "string",
          "description": "The mediaItemâ€™s parent domain Id "
        },
        "foreignKey": {
          "type": "string",
          "description": "The mediaItemâ€™s foreignKey "
        },
        "title": {
          "type": "string",
          "description": "The mediaItemâ€™s title "
        },
        "draftVersion": {
          "type": "number",
          "description": "The iteration of that specific mediaItem (will increment if a new version of the video is ingested) "
        },
        "publishedVersion": {
          "type": "number",
          "description": "The iteration of that specific mediaItem (will increment if a new version of the video is ingested) "
        },
        "description": {
          "type": "number",
          "description": "Text description of the video "
        },
        "keywords": {
          "type": "array",
          "description": "Array of video keywords ",
          "items": {
            "type": "string"
          }
        },
        "Array": {
          "type": "array",
          "description": "of cue point objects ",
          "items": {
            "$ref": "#/definitions/Array"
          }
        },
        "publicationRules": {
          "type": "array",
          "description": "Array of Publication Rules ",
          "items": {
            "$ref": "#/definitions/publicationRules"
          }
        },
        "countryRules": {
          "type": "array",
          "description": "Array of country-based filters, ",
          "items": {
            "$ref": "#/definitions/countryRules"
          }
        },
        "metadata": {
          "type": "array",
          "description": "Array of Extended Metadata key-value pairs ",
          "items": {
            "$ref": "#/definitions/metadata"
          }
        }
      },
      "required": [
        "id",
        "catalogId",
        "domainId",
        "foreignKey",
        "title",
        "draftVersion",
        "publishedVersion",
        "description",
        "keywords",
        "Array",
        "publicationRules",
        "countryRules",
        "metadata"
      ]
    },
    "cuePoints": {
      "properties": {
        "unit": {
          "type": "string",
          "description": "Unit of time (currently only seconds are supported) "
        },
        "valueIn": {
          "type": "string",
          "description": "Time of cue point "
        }
      },
      "required": [
        "unit",
        "valueIn"
      ]
    },
    "publicationRules": {
      "properties": {
        "startDate": {
          "type": "number",
          "description": "Epoch time (in seconds) when publication rule becomes effective "
        },
        "endDate": {
          "type": "number",
          "description": "Epoch time (in seconds) when publication rule expires "
        },
        "clientFilters": {
          "type": "array",
          "description": "Array of client-based filters ",
          "items": {
            "$ref": "#/definitions/publicationRules.clientFilters"
          }
        }
      },
      "required": [
        "startDate",
        "endDate",
        "clientFilters"
      ]
    },
    "Get_MediaItem_DetailsError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Update_MediaItemResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "The mediaItem Id "
        },
        "catalogId": {
          "type": "string",
          "description": "The mediaItemâ€™s parent catalog Id "
        },
        "domainId": {
          "type": "string",
          "description": "The mediaItemâ€™s parent domain Id "
        },
        "foreignKey": {
          "type": "string",
          "description": "The mediaItemâ€™s foreignKey "
        },
        "title": {
          "type": "string",
          "description": "The mediaItemâ€™s title "
        },
        "draftVersion": {
          "type": "number",
          "description": "The iteration of that specific mediaItem (will increment if a new version of the video is ingested) "
        },
        "publishedVersion": {
          "type": "number",
          "description": "The iteration of that specific mediaItem (will increment if a new version of the video is ingested) "
        },
        "description": {
          "type": "number",
          "description": "Text description of the video "
        },
        "keywords": {
          "type": "array",
          "description": "Array of video keywords ",
          "items": {
            "type": "string"
          }
        },
        "Array": {
          "type": "array",
          "description": "of cue point objects ",
          "items": {
            "$ref": "#/definitions/Array"
          }
        },
        "publicationRules": {
          "type": "array",
          "description": "Array of Publication Rules ",
          "items": {
            "$ref": "#/definitions/publicationRules"
          }
        },
        "countryRules": {
          "type": "array",
          "description": "Array of country-based filters, ",
          "items": {
            "$ref": "#/definitions/countryRules"
          }
        },
        "metadata": {
          "type": "array",
          "description": "Array of Extended Metadata key-value pairs ",
          "items": {
            "$ref": "#/definitions/metadata"
          }
        }
      },
      "required": [
        "id",
        "catalogId",
        "domainId",
        "foreignKey",
        "title",
        "draftVersion",
        "publishedVersion",
        "description",
        "keywords",
        "Array",
        "publicationRules",
        "countryRules",
        "metadata"
      ]
    },
    "Update_MediaItemError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Delete_MediaItem_Publication_RuleResponseFields": {
      "properties": {
        "id": {
          "type": "string",
          "description": "the publication rule id "
        }
      },
      "required": [
        "id"
      ]
    },
    "Delete_MediaItem_Publication_RuleError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Get_MediaItem_Publication_Rule_DetailsResponseFields": {
      "properties": {
        "startDate": {
          "type": "number",
          "description": "Epoch time (in seconds) when publication rule becomes effective "
        },
        "endDate": {
          "type": "number",
          "description": "Epoch time (in seconds) when publication rule expires "
        },
        "clientFilters": {
          "type": "array",
          "description": "Array of client-based filters ",
          "items": {
            "$ref": "#/definitions/clientFilters"
          }
        },
        "countryRules": {
          "type": "array",
          "description": "Array of country-based filters ",
          "items": {
            "$ref": "#/definitions/countryRules"
          }
        },
        "id": {
          "type": "string",
          "description": "The publicationRule Id "
        },
        "domain": {
          "type": "string",
          "description": "The publication ruleâ€™s parent domain Id "
        },
        "catalog": {
          "type": "string",
          "description": "The publication ruleâ€™s parent catalog Id "
        },
        "mediaItem": {
          "type": "string",
          "description": "The publication ruleâ€™s parent mediaItem Id "
        }
      },
      "required": [
        "startDate",
        "endDate",
        "clientFilters",
        "countryRules",
        "id",
        "domain",
        "catalog",
        "mediaItem"
      ]
    },
    "Get_MediaItem_Publication_Rule_DetailsError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Get_All_MediaItem_Publication_RulesResponseFields": {
      "properties": {
        "publicationRuleIds": {
          "type": "array",
          "description": "A comma-separated array of publicationRuleIds assigned to the mediaItem ",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "publicationRuleIds"
      ]
    },
    "Get_All_MediaItem_Publication_RulesError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Get_All_MediaItems_In_CatalogResponseFields": {
      "properties": {
        "URL": {
          "type": "url",
          "description": "to GET the previous mediaItem result set (if necessary) "
        },
        "The": {
          "type": "number",
          "description": "total number of mediaItems in the catalog "
        }
      },
      "required": [
        "URL",
        "The"
      ]
    },
    "Get_All_MediaItems_In_CatalogError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Update_MediaItem_Publication_RuleResponseFields": {
      "properties": {
        "startDate": {
          "type": "number",
          "description": "Epoch time (in seconds) when publication rule becomes effective, "
        },
        "endDate": {
          "type": "number",
          "description": "Epoch time (in seconds) when publication rule expires, "
        },
        "clientFilters": {
          "type": "array",
          "description": "Array of client-based filters, ",
          "items": {
            "$ref": "#/definitions/clientFilters"
          }
        },
        "countryRules": {
          "type": "array",
          "description": "Array of country-based filters, ",
          "items": {
            "$ref": "#/definitions/countryRules"
          }
        },
        "id": {
          "type": "string",
          "description": "The publicationRule Id "
        },
        "domain": {
          "type": "string",
          "description": "The publication ruleâ€™s parent domain Id "
        },
        "catalog": {
          "type": "string",
          "description": "The publication ruleâ€™s parent catalog Id "
        },
        "mediaItem": {
          "type": "string",
          "description": "The publication ruleâ€™s parent mediaItem Id "
        }
      },
      "required": [
        "startDate",
        "endDate",
        "clientFilters",
        "countryRules",
        "id",
        "domain",
        "catalog",
        "mediaItem"
      ]
    },
    "Update_MediaItem_Publication_RuleError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    },
    "Update_Update_Item_Timed_Text_AssetResponseFields": {
      "properties": {
        "requestId": {
          "type": "string",
          "description": "The job id for the request "
        }
      },
      "required": [
        "requestId"
      ]
    },
    "Update_Update_Item_Timed_Text_AssetError4xx": {
      "properties": {
        "Bad": {
          "type": "json",
          "description": "Request - json - 400: Bad Request &mdash; Incorrect or invalid request body "
        },
        "Forbidden": {
          "type": "json",
          "description": "403: Forbidden &mdash; Missing or incorrect API Key "
        },
        "Not": {
          "type": "json",
          "description": "Found 404: Not Found &mdash; Incorrect or invalid URL path "
        }
      },
      "required": [
        "Bad",
        "Forbidden",
        "Not"
      ]
    }
  },
  "schemes": [
    "https"
  ],
  "host": "api.unicornmedia.com",
  "basePath": "/media-management-api"
}