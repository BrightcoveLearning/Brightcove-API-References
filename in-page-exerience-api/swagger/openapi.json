{
  "openapi": "3.0.0",
  "info": {
    "title": "Brightcove In-Page Experiences API Reference",
    "description": "Reference for the Brightcove In-Page Experiences API, used to access and manage your In-Page Experiences.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://localhost.brightcove.com:7000/v1",
      "variables": {}
    },
    {
      "url": "https://experiences.api.brightcove.com/v1",
      "variables": {}
    }
  ],
  "paths": {
    "/accounts/{account_id}/experiences": {
      "parameters": [
        {
          "$ref": "#/components/parameters/AccountId"
        },
        {
          "$ref": "#/components/parameters/ContentType"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get In-Page Experiences",
        "description": "Gets a list of all experiences in the account",
        "operationId": "GetExperiences",
        "tags": [
          "Experiences"
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort the result by the specified field. A - prefix can be added to reverse the sort order",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Search string for searching In-Page Experience titles and descriptions",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "description": "200",
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Experience"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        },
        "deprecated": false,
        "security": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "summary": "Create In-Page Experience",
        "description": "Creates an In-Page Experience",
        "operationId": "CreateExperience",
        "tags": [
          "Experiences"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Experience"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Experience"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestExperience"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/accounts/{account_id}/experiences/{experience_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/AccountId"
        },
        {
          "name": "experience_id",
          "in": "path",
          "description": "In-Page Experience ID",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/ContentType"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get In-Page Experience",
        "description": "Gets a specific In-Page Experience in the account",
        "operationId": "GetExperience",
        "tags": [
          "Experiences"
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Experience"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundExperience"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "put": {
        "summary": "Update In-Page Experience",
        "description": "Updates an In-Page Experience",
        "operationId": "UpdateExperience",
        "tags": [
          "Experiences"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Experience"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Experience"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestExperience"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundExperience"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "delete": {
        "summary": "Delete In-Page Experience",
        "description": "Deletes an In-Page Experience",
        "operationId": "DeleteExperience",
        "tags": [
          "Experiences"
        ],
        "responses": {
          "204": {
            "description": "SUCCESS"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundExperience"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/accounts/{account_id}/experiences/{experience_id}/actions/publish": {
      "parameters": [
        {
          "$ref": "#/components/parameters/AccountId"
        },
        {
          "name": "experience_id",
          "in": "path",
          "description": "In-Page Experience ID",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/ContentType"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "post": {
        "summary": "Publish In-Page Experience",
        "description": "Publish the specified In-Page Experience. This will initiate a publish, you can poll the GET endpoint for fetching the In-Page Experience to check its published status to see when publishing completes",
        "operationId": "PublishExperience",
        "tags": [
          "Experiences"
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Experience"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundExperience"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/accounts/{account_id}/experiences/{experience_id}/actions/unpublish": {
      "parameters": [
        {
          "$ref": "#/components/parameters/AccountId"
        },
        {
          "name": "experience_id",
          "in": "path",
          "description": "In-Page Experience ID",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/ContentType"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "post": {
        "summary": "Unpublish In-Page Experience",
        "description": "Takes the specified In-Page Experience offline. If this In-Page Experience is embedded anywhere, it will be replaced with text notifying the end user that it is offline. This will initiate an unpublish, you can poll the GET endpoint for fetching the In-Page Experience to check its published status to see when unpublishing completes",
        "operationId": "UnpublishExperience",
        "tags": [
          "Experiences"
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Experience"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundExperience"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/accounts/{account_id}/experiences/{experience_id}/actions/duplicate": {
      "parameters": [
        {
          "$ref": "#/components/parameters/AccountId"
        },
        {
          "name": "experience_id",
          "in": "path",
          "description": "In-Page Experience ID",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/ContentType"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "post": {
        "summary": "Duplicate In-Page Experience",
        "description": "Duplicates the specified In-Page Experience and all of its associated interactivity",
        "operationId": "DuplicateExperience",
        "tags": [
          "Experiences"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "New name for the duplicated In-Page Experience"
                  },
                  "description": {
                    "type": "string",
                    "description": "New description for the duplicated In-Page Experience"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Experience"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundExperience"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/accounts/{account_id}/experiences/{experience_id}/live/status": {
      "parameters": [
        {
          "$ref": "#/components/parameters/AccountId"
        },
        {
          "name": "experience_id",
          "in": "path",
          "description": "In-Page Experience ID",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/ContentType"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get In-Page Experience Live Status",
        "description": "Gets the live event status of the specified In-Page Experience",
        "operationId": "GetExperienceLiveStatus",
        "tags": [
          "Experiences"
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperienceEventStatus"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundExperience"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "put": {
        "summary": "Set In-Page Experience Live Status",
        "description": "Sets the live event status of the specified In-Page Experience",
        "operationId": "SetExperienceLiveStatus",
        "tags": [
          "Experiences"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExperienceEventStatus"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExperienceEventStatus"
                }
              }
            }
          },
          "400": {
            "description": "BAD_REQUEST: Invalid live event status, see response for details"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundExperience"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/accounts/{account_id}/templates": {
      "parameters": [
        {
          "$ref": "#/components/parameters/AccountId"
        },
        {
          "$ref": "#/components/parameters/ContentType"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get Templates",
        "description": "Gets all templates available to the account",
        "operationId": "GetTemplates",
        "tags": [
          "Templates"
        ],
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "description": "Locale for translating the template metadata",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": ["en_US", "es_ES", "fr_FR", "ja_JP", "ko_KO", "zh_HANT"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Template"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/accounts/{account_id}/templates/{template_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/AccountId"
        },
        {
          "name": "template_id",
          "in": "path",
          "description": "Template ID",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/ContentType"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get Template",
        "description": "Gets the specified template",
        "operationId": "GetTemplate",
        "tags": [
          "Templates"
        ],
        "parameters": [
          {
            "name": "locale",
            "in": "query",
            "description": "Locale for translating the template metadata",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": ["en_US", "es_ES", "fr_FR", "ja_JP", "ko_KO", "zh_HANT"]
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Template version",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          },
          "400": {
            "description": "BAD_REQUEST: The template version must be a semantic version string (i.e. `1.0.0`)"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundTemplate"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/accounts/{account_id}/themes": {
      "parameters": [
        {
          "$ref": "#/components/parameters/AccountId"
        },
        {
          "$ref": "#/components/parameters/ContentType"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get Themes",
        "description": "Gets all themes for the account",
        "operationId": "GetThemes",
        "tags": [
          "Themes"
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Theme"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "post": {
        "summary": "Create Theme",
        "description": "Creates a new theme",
        "operationId": "CreateTheme",
        "tags": [
          "Themes"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Theme"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Theme"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestTheme"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/accounts/{account_id}/themes/{theme_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/AccountId"
        },
        {
          "name": "theme_id",
          "in": "path",
          "description": "Theme ID",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/ContentType"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get Theme",
        "description": "Gets the specified theme",
        "operationId": "GetTheme",
        "tags": [
          "Themes"
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Theme"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundTheme"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "put": {
        "summary": "Update Theme",
        "description": "Updates the specified theme",
        "operationId": "UpdateTheme",
        "tags": [
          "Themes"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Theme"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Theme"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestTheme"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundTheme"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "delete": {
        "summary": "Delete Theme",
        "description": "Deletes the specified theme",
        "operationId": "DeleteTheme",
        "tags": [
          "Themes"
        ],
        "responses": {
          "204": {
            "description": "SUCCESS"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundTheme"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/accounts/{account_id}/fonts": {
      "parameters": [
        {
          "$ref": "#/components/parameters/AccountId"
        },
        {
          "$ref": "#/components/parameters/ContentType"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get Fonts",
        "description": "Gets all fonts for the account",
        "operationId": "GetFonts",
        "tags": [
          "Fonts"
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Font"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "post": {
        "summary": "Create Font",
        "description": "Creates a font",
        "operationId": "CreateFont",
        "tags": [
          "Fonts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Font"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "CREATED",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Font"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestFont"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/accounts/{account_id}/fonts/{font_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/AccountId"
        },
        {
          "name": "font_id",
          "in": "path",
          "description": "Font ID",
          "required": true,
          "style": "simple",
          "explode": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/ContentType"
        },
        {
          "$ref": "#/components/parameters/Authorization"
        }
      ],
      "get": {
        "summary": "Get Font",
        "description": "Gets the specified font",
        "operationId": "GetFont",
        "tags": [
          "Fonts"
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Font"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundFont"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "put": {
        "summary": "Update Font",
        "description": "Updates the specified font",
        "operationId": "UpdateFont",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Font"
              }
            }
          }
        },
        "tags": [
          "Fonts"
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Font"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestFont"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundFont"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "delete": {
        "summary": "Delete Font",
        "description": "Deletes the specified font",
        "operationId": "DeleteFont",
        "tags": [
          "Fonts"
        ],
        "responses": {
          "204": {
            "description": "SUCCESS"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundFont"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Experience": {
        "title": "Experience",
        "description": "In-Page Experience document",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the In-Page Experience",
            "example": "111111111111",
            "readOnly": true
          },
          "accountId": {
            "type": "number",
            "description": "Video Cloud account ID",
            "example": 1111111111111,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the In-Page Experience",
            "example": "Sample In-Page Experience"
          },
          "description": {
            "type": "string",
            "description": "Description for the In-Page Experience",
            "example": "A sample In-Page Experience for demonstration purposes"
          },
          "inactive": {
            "type": "boolean",
            "description": "Whether the In-Page Experience is offline (inactive)",
            "example": false
          },
          "height": {
            "type": "number",
            "description": "Fixed height of the In-Page Experience (null for responsive height)"
          },
          "width": {
            "type": "number",
            "description": "Fixed width of the In-Page Experience (null for responsive width)"
          },
          "template": {
            "type": "string",
            "description": "ID of the template",
            "example": "ee-single-video"
          },
          "templateVersion": {
            "type": "string",
            "description": "Version of the template",
            "example": "1.0.0",
            "readOnly": true
          },
          "locale": {
            "type": "string",
            "enum": ["en_US", "es_ES", "fr_FR", "ja_JP", "ko_KO", "zh_HK", "zh_TW"],
            "description": "The locale of the In-Page Experience"
          },
          "videos": {
            "$ref": "#/components/schemas/ExperienceVideos"
          },
          "player": {
            "$ref": "#/components/schemas/ExperiencePlayer"
          },
          "playbackApiBaseUrl": {
            "type": "string",
            "description": "Base URL for fetching video information from the [Playback API](https://support.brightcove.com/playback-api). For IP restricted accounts this should be set to https://edge-elb.api.brightcove.com/playback/v1, otherwise this should be null"
          },
          "policyKey": {
            "type": "string",
            "description": "Policy key for fetching video information from the [Playback API](https://support.brightcove.com/playback-api)."
          },
          "youtubeKey": {
            "type": "string",
            "description": "Auto-generated key for fetching YouTube video information from Gallery.",
            "readOnly": true
          },
          "assets": {
            "$ref": "#/components/schemas/ExperienceAssets"
          },
          "social": {
            "$ref": "#/components/schemas/ExperienceSocial"
          },
          "styles": {
            "$ref": "#/components/schemas/Styles"
          },
          "layouts": {
            "$ref": "#/components/schemas/ExperienceLayouts"
          },
          "content": {
            "$ref": "#/components/schemas/ExperienceContent"
          },
          "analytics": {
            "$ref": "#/components/schemas/ExperienceAnalytics"
          },
          "event": {
            "$ref": "#/components/schemas/ExperienceEvent"
          },
          "configurations": {
            "$ref": "#/components/schemas/ExperienceConfigurations"
          },
          "publishAttemptedAt": {
            "type": "string",
            "description": "ISO-8601 date when the last publish was attempted",
            "readOnly": true
          },
          "publishedAt": {
            "type": "string",
            "description": "ISO-8601 date when the last successful publish happened",
            "readOnly": true
          },
          "publishFailedAt": {
            "type": "string",
            "description": "ISO-8601 date when the last failed publish happened",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "ISO-8601 date when the In-Page Experience was last updated",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "description": "ISO-8601 date when the In-Page Experience was created",
            "readOnly": true
          },
          "publishedUrl": {
            "type": "string",
            "description": "URL to the published In-Page Experience. `null` if the Experience has never been published",
            "readOnly": true
          },
          "previewUrl": {
            "type": "string",
            "description": "URL for previewing the In-Page Experience. This URL is valid for 24 hours and is re-generated for each request to the API",
            "readOnly": true
          },
          "theme": {
            "type": "string",
            "description": "ID of the theme to use for styling this In-Page Experience. Can also be `light` or `dark` to use the built-in light and dark themes"
          },
          "hasChanges": {
            "type": "boolean",
            "description": "Whether the In-Page Experience has been modified since the last time it was published",
            "readOnly": true
          },
          "publishedStatus": {
            "type": "string",
            "enum": ["unpublished", "success", "publishing", "unpublishing", "inactive", "failed"],
            "description": "The current published status of the In-Page Experience",
            "readOnly": true
          }
        },
        "required": [
          "name",
          "template"
        ]
      },
      "ExperienceAssets": {
        "title": "ExperienceAssets",
        "description": "Assets used by the In-Page Experience",
        "type": "object",
        "properties": {
          "customCss": {
            "type": "string",
            "description": "Inline custom CSS"
          },
          "customCssUrl": {
            "type": "string",
            "description": "External custom CSS URL"
          },
          "customJavaScript": {
            "type": "string",
            "description": "Inline custom JavaScript"
          },
          "customJavaScriptUrl": {
            "type": "string",
            "description": "External custom JavaScript URL"
          },
          "headerAdCode": {
            "type": "string",
            "description": "Global advertising code which gets inlined into the `<head>` of the page"
          },
          "fonts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FontBase"
            },
            "description": "Fonts which are included in the In-Page Experience"
          }
        }
      },
      "ExperienceVideos": {
        "title": "ExperienceVideos",
        "description": "Properties defining the videos in the In-Page Experience and behavior related to videos",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["manual", "playlist"],
            "description": "How videos are defined"
          },
          "videoIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "IDs of videos which are included in the In-Page Experience when type is set to manual. For Video Cloud videos this is just the numeric ID. For YouTube videos, a prefix of `youtube:` must be added to the ID."
          },
          "playlistId": {
            "type": "string",
            "description": "ID of the playlist to pull videos from when type is set to playlist"
          },
          "showRelatedLinks": {
            "type": "boolean",
            "description": "Whether related links for videos should be displayed"
          },
          "useLongDescriptions": {
            "type": "boolean",
            "description": "Whether to display the long description of a video (if it exists) while it is being watched"
          },
          "allowDownloads": {
            "type": "string",
            "enum": ["none", "all", "custom-field"],
            "description": "Criteria for displaying a download link for videos. `none` disables downloads, `all` enables downloads for all videos which have an mp4 source, and `custom-field` will enable downloads for videos which have a matching custom field. YouTube videos cannot be downloaded."
          },
          "downloadCustomField": {
            "type": "string",
            "description": "Custom field to check whether to display a download link for videos when `allowDownloads` is set to `custom-field`"
          },
          "downloadCustomFieldValue": {
            "type": "string",
            "description": "Custom field value to check whether to display a download link for videos when `allowDownloads` is set to `custom-field`"
          },
          "watchedIndicator": {
            "type": "boolean",
            "description": "Whether to show an indicator that a video has been watched on its thumbnail after it has finished playing"
          }
        }
      },
      "ExperiencePlayer": {
        "title": "ExperiencePlayer",
        "description": "Properties defining the player and its behavior",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the player to use"
          },
          "autoAdvance": {
            "type": "boolean",
            "description": "Whether to automatically advance to the next video when the current one finishes playing"
          },
          "autoAdvanceTime": {
            "type": "number",
            "description": "Number of seconds to wait before advancing to the next video when autoAdvance is true"
          },
          "playsInline": {
            "type": "boolean",
            "description": "Whether the video plays inline on iOS devices"
          },
          "endBehavior": {
            "type": "string",
            "enum": ["after", "during"],
            "description": "Whether the In-Page Experience advances to the After Play state (after), or stays on the Playing state (during) after the current video finishes playing"
          }
        }
      },
      "ExperienceSocial": {
        "title": "ExperienceSocial",
        "description": "Properties describing social sharing behavior",
        "type": "object",
        "properties": {
          "display": {
            "type": "string",
            "enum": ["button", "icons"],
            "description": "How social sharing should be displayed"
          },
          "deepLinkParameter": {
            "type": "string",
            "description": "Query-string parameter used for deep-linking to a specific video in the In-Page Experience when it is shared"
          },
          "sharingOptions": {
            "$ref": "#/components/schemas/ExperienceSharingOptions"
          }
        }
      },
      "ExperienceAnalytics": {
        "title": "ExperienceAnalytics",
        "description": "Analytics settings",
        "type": "object",
        "properties": {
          "googleAnalyticsId": {
            "type": "string",
            "description": "Google Analytics project ID for sending events to Google Analytics"
          }
        }
      },
      "ExperienceEvent": {
        "title": "ExperienceEvent",
        "description": "Live event information (only available for the ee-live-event template)",
        "type": "object",
        "properties": {
          "showCountdown": {
            "type": "boolean",
            "description": "Whether to show the event countdown"
          },
          "showAddToCalendar": {
            "type": "boolean",
            "description": "Whether to show the Add to Calendar button"
          },
          "startTime": {
            "type": "string",
            "description": "Event start time as an ISO-8601 string"
          },
          "endTime": {
            "type": "string",
            "description": "Event end time as an ISO-8601 string"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone of the event"
          },
          "title": {
            "type": "string",
            "description": "Event title used in the calendar event"
          },
          "description": {
            "type": "string",
            "description": "Event description used in the calendar event"
          },
          "location": {
            "type": "string",
            "description": "Event location used in the calendar event"
          },
          "transitionMessage": {
            "type": "string",
            "description": "Message to use in the countdown after the time remaining has reached 0"
          },
          "social": {
            "$ref": "#/components/schemas/ExperienceEventSocial"
          }
        }
      },
      "ExperienceEventSocial": {
        "title": "ExperienceEventSocial",
        "type": "object",
        "properties": {
          "display": {
            "type": "string",
            "enum": ["button", "icon"],
            "description": "How to display event sharing"
          },
          "title": {
            "type": "string",
            "description": "Title of the event used when it is shared"
          },
          "description": {
            "type": "string",
            "description": "Description of the event used when it is shared"
          },
          "image": {
            "type": "string",
            "description": "URL to an image which is used when the event is shared"
          },
          "sharingOptions": {
            "$ref": "#/components/schemas/ExperienceSharingOptions"
          }
        }
      },
      "ExperienceEventStatus": {
        "title": "ExperienceEventStatus",
        "description": "Live event status of an In-Page Experience",
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["preEvent", "live", "postEvent"],
            "description": "Currently displayed state of the In-Page Experience"
          }
        }
      },
      "ExperienceSharingOptions": {
        "title": "ExperienceSharingOptions",
        "description": "Platform-specific sharing options",
        "type": "object",
        "properties": {
          "facebook": {
            "allOf": [{
              "$ref": "#/components/schemas/ExperienceSharingOption"
            }],
            "description": "Sharing options for Facebook"
          },
          "googlePlus": {
            "allOf": [{
              "$ref": "#/components/schemas/ExperienceSharingOption"
            }],
            "description": "Sharing options for Google+"
          },
          "linkedIn": {
            "allOf": [{
              "$ref": "#/components/schemas/ExperienceSharingOption"
            }],
            "description": "Sharing options for LinkedIn"
          },
          "pinterest": {
            "allOf": [{
              "$ref": "#/components/schemas/ExperienceSharingOption"
            }],
            "description": "Sharing options for Pinterest"
          },
          "twitter": {
            "allOf": [{
              "$ref": "#/components/schemas/ExperienceSharingOption"
            }],
            "description": "Sharing options for Twitter"
          },
          "email": {
            "allOf": [{
              "$ref": "#/components/schemas/ExperienceSharingOption"
            }],
            "description": "Sharing options for Email"
          }
        }
      },
      "ExperienceSharingOption": {
        "title": "ExperienceSharingOption",
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether sharing is enabled for the specified platform"
          },
          "useCustomMessage": {
            "type": "boolean",
            "description": "Whether custom messaging should be enabled for the specified platform (if the platform supports it)"
          },
          "customMessage": {
            "type": "string",
            "description": "Custom message to use for the specified platform if `useCustomMessage` is `true`"
          }
        }
      },
      "ExperienceContent": {
        "title": "ExperienceContent",
        "description": "Experience content",
        "type": "object",
        "properties": {
          "top": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExperienceComponent"
            },
            "description": "Components which are displayed on top of the In-Page Experience"
          },
          "left": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExperienceComponent"
            },
            "description": "Components which are displayed to the left of the In-Page Experience"
          },
          "right": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExperienceComponent"
            },
            "description": "Components which are displayed to the right of the In-Page Experience"
          },
          "bottom": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExperienceComponent"
            },
            "description": "Components which are displayed below the In-Page Experience"
          },
          "main": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExperienceComponent"
            },
            "description": "Live event hero image (only applies to the ee-live-event template)"
          },
          "preEventDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExperienceComponent"
            },
            "description": "Live event pre-event details text (only applies to the ee-live-event template)"
          },
          "postEventDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExperienceComponent"
            },
            "description": "Live event post-event details text (only applies to the ee-live-event template)"
          }
        }
      },
      "ExperienceComponent": {
        "title": "ExperienceComponent",
        "description": "Experience component",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the component (auto-generated)",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the component, used for analytics"
          },
          "views": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Views that this component will be visible during"
          },
          "type": {
            "type": "string",
            "enum": ["text", "image", "advertisement", "chat", "heroImage", "html", "threePlay", "twitter"],
            "description": "Type of component"
          },
          "value": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ExperienceComponentImageValue"
              },
              {
                "$ref": "#/components/schemas/ExperienceComponentHeroImageValue"
              },
              {
                "type": "string"
              }
            ],
            "description": "Value of the component. This is dependent on the value of `type`. `image` and `heroImage` have extended properties, whereas the other component types simply take a string value. `text`, `advertisement`, `chat`, `html`, and `twitter` all take an HTML string, while `threePlay` takes the 3Play project ID"
          }
        },
        "required": [
          "views"
        ]
      },
      "ExperienceComponentImageValue": {
        "title": "ExperienceComponentImageValue",
        "description": "Image component value",
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "description": "URL of the image"
          },
          "display": {
            "type": "string",
            "enum": ["responsive", "fixed"],
            "description": "How the image will be sized"
          },
          "alignment": {
            "type": "string",
            "enum": ["left", "center", "right"],
            "description": "How the image will be horizontally aligned"
          },
          "width": {
            "type": "number",
            "description": "Width of the image when `display` is `fixed`"
          },
          "height": {
            "type": "number",
            "description": "Height of the image when `display` is `fixed`"
          },
          "clickThroughUrl": {
            "type": "string",
            "description": "URL to navigate to when the image is clicked"
          },
          "openNewWindow": {
            "type": "boolean",
            "description": "Whether to open the `clickThroughUrl` in a new window"
          }
        }
      },
      "ExperienceComponentHeroImageValue": {
        "title": "ExperienceComponentHeroImageValue",
        "description": "Hero image component value",
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "description": "URL of the image"
          },
          "size": {
            "type": "string",
            "enum": ["cover", "contain", "stretch", "none"],
            "description": "How the image will be sized within the hero image container. `cover` will crop the image, `contain` will contain the image within the bounds of the container, `stretch` will stretch the image to fill the container ignoring aspect ratio, and `none` will use the original image size"
          }
        }
      },
      "ExperienceConfigurations": {
        "title": "ExperienceConfigurations",
        "description": "Experience configurations",
        "type": "object",
        "properties": {
          "preEvent": {
            "allOf": [{
              "$ref": "#/components/schemas/ExperienceConfiguration"
            }],
            "description": "Configuration for the pre-event state (only applies to the ee-live-event template)"
          },
          "live": {
            "allOf": [{
              "$ref": "#/components/schemas/ExperienceConfiguration"
            }],
            "description": "Configuration for the live state (only applies to the ee-live-event template)"
          },
          "postEvent": {
            "allOf": [{
              "$ref": "#/components/schemas/ExperienceConfiguration"
            }],
            "description": "Configuration for the post-event state (only applies to the ee-live-event template)"
          }
        }
      },
      "ExperienceConfiguration": {
        "title": "ExperienceConfiguration",
        "description": "Experience configuration",
        "type": "object",
        "properties": {
          "videos": {
            "$ref": "#/components/schemas/ExperienceVideos"
          }
        }
      },
      "ExperienceLayouts": {
        "title": "ExperienceLayouts",
        "description": "Collection of layout options for the In-Page Experience. The keys for this can be found in the template layouts metadata",
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/ExperienceLayoutOptions"
        }
      },
      "ExperienceLayoutOptions": {
        "title": "ExperienceLayoutOptions",
        "description": "Layout options for the In-Page Experience. The keys and values for this can be found in the template layouts metadata",
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "Template": {
        "title": "Template",
        "description": "In-Page Experience template",
        "type": "object",
        "readOnly": true,
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the template"
          },
          "version": {
            "type": "string",
            "description": "Template version"
          },
          "metadata": {
            "$ref": "#/components/schemas/TemplateMetadata"
          }
        }
      },
      "TemplateMetadata": {
        "title": "TemplateMetadata",
        "description": "Metadata describing the template",
        "type": "object",
        "readOnly": true,
        "properties": {
          "name": {
            "type": "string",
            "description": "Template display name"
          },
          "description": {
            "type": "string",
            "description": "Template description"
          },
          "demo": {
            "type": "string",
            "description": "URL to a demo of the template"
          },
          "image": {
            "type": "string",
            "description": "Relative URL to an SVG image representing the template"
          },
          "views": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateView"
            }
          },
          "layouts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateLayout"
            }
          }
        }
      },
      "TemplateView": {
        "title": "TemplateView",
        "description": "Template view",
        "type": "object",
        "readOnly": true,
        "properties": {
          "name": {
            "type": "string",
            "description": "View ID"
          },
          "title": {
            "type": "string",
            "description": "View display name"
          },
          "isPlaybackView": {
            "type": "boolean",
            "description": "Whether this view is used for playing back videos"
          },
          "hidden": {
            "type": "boolean",
            "description": "Whether this view is hidden in the authoring environment"
          }
        }
      },
      "TemplateLayout": {
        "title": "TemplateLayout",
        "description": "Template layout descriptor",
        "type": "object",
        "readOnly": true,
        "properties": {
          "name": {
            "type": "string",
            "description": "Layout ID"
          },
          "title": {
            "type": "string",
            "description": "Layout display name"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateLayoutCategory"
            }
          }
        }
      },
      "TemplateLayoutCategory": {
        "title": "TemplateLayoutCategory",
        "description": "Template layout category",
        "type": "object",
        "readOnly": true,
        "properties": {
          "name": {
            "type": "string",
            "description": "Template layout category ID"
          },
          "title": {
            "type": "string",
            "description": "Template layout category display name"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateLayoutOption"
            }
          }
        }
      },
      "TemplateLayoutOption": {
        "title": "TemplateLayoutOption",
        "description": "Template layout option",
        "type": "object",
        "readOnly": true,
        "properties": {
          "name": {
            "type": "string",
            "description": "Template layout option ID"
          },
          "title": {
            "type": "string",
            "description": "Template layout option display name"
          },
          "image": {
            "type": "string",
            "description": "Relative URL to an SVG image which represents the layout option"
          }
        }
      },
      "Theme": {
        "title": "Theme",
        "description": "Theme",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the theme",
            "readOnly": true
          },
          "accountId": {
            "type": "number",
            "description": "Video Cloud account ID",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the theme"
          },
          "description": {
            "type": "string",
            "description": "Description of the theme"
          },
          "styles": {
            "$ref": "#/components/schemas/Styles"
          },
          "fonts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FontBase"
            },
            "description": "Fonts included in the theme"
          },
          "updatedAt": {
            "type": "string",
            "description": "ISO-8601 date when the theme was last modified",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "description": "ISO-8601 date when the theme was created",
            "readOnly": true
          }
        },
        "required": [
          "name"
        ]
      },
      "Styles": {
        "title": "ExperienceStyles",
        "description": "Style overrides",
        "type": "object",
        "properties": {
          "global": {
            "allOf": [{
              "$ref": "#/components/schemas/Style"
            }],
            "description": "Global style overrides"
          },
          "anchor": {
            "allOf": [{
              "$ref": "#/components/schemas/Style"
            }],
            "description": "Link style overrides"
          },
          "navigation": {
            "allOf": [{
              "$ref": "#/components/schemas/Style"
            }],
            "description": "Navigation link style overrides"
          },
          "videoInfo": {
            "allOf": [{
              "$ref": "#/components/schemas/Style"
            }],
            "description": "Video information style overrides"
          },
          "videoTitle": {
            "allOf": [{
              "$ref": "#/components/schemas/Style"
            }],
            "description": "Video title style overrides"
          },
          "videoDescription": {
            "allOf": [{
              "$ref": "#/components/schemas/Style"
            }],
            "description": "Video description style overrides"
          },
          "overlay": {
            "allOf": [{
              "$ref": "#/components/schemas/Style"
            }],
            "description": "Overlay video information style overrides"
          },
          "overlayTitle": {
            "allOf": [{
              "$ref": "#/components/schemas/Style"
            }],
            "description": "Overlay video title style overrides"
          },
          "overlayDescription": {
            "allOf": [{
              "$ref": "#/components/schemas/Style"
            }],
            "description": "Overlay video description style overrides"
          },
          "overlayBanner": {
            "allOf": [{
              "$ref": "#/components/schemas/Style"
            }],
            "description": "Watched banner style overrides"
          },
          "nowPlaying": {
            "allOf": [{
              "$ref": "#/components/schemas/Style"
            }],
            "description": "Now playing banner style overrides"
          },
          "playButton": {
            "allOf": [{
              "$ref": "#/components/schemas/Style"
            }],
            "description": "Play button style overrides"
          },
          "sharing": {
            "allOf": [{
              "$ref": "#/components/schemas/Style"
            }],
            "description": "Sharing button style overrides"
          },
          "overlaySharing": {
            "allOf": [{
              "$ref": "#/components/schemas/Style"
            }],
            "description": "Overlay sharing button style overrides"
          },
          "eventCountdown": {
            "allOf": [{
              "$ref": "#/components/schemas/Style"
            }],
            "description": "Live event countdown style overrides"
          },
          "calendarReminder": {
            "allOf": [{
              "$ref": "#/components/schemas/Style"
            }],
            "description": "Live event calendar reminder style overrides"
          }
        }
      },
      "Style": {
        "title": "Style",
        "type": "object",
        "additionalProperties": {
          "type": "string"
        },
        "example": {
          "color": "rgba(255, 0, 0, 1)",
          "backgroundColor": "blue",
          "fontSize": "14"
        }
      },
      "FontBase": {
        "title": "FontBase",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Font name"
          },
          "css": {
            "type": "string",
            "description": "CSS required to import the font"
          }
        },
        "required": [
          "name",
          "css"
        ]
      },
      "Font": {
        "title": "Font",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Font ID",
            "readOnly": true
          },
          "accountId": {
            "type": "string",
            "description": "Video Cloud account ID",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Font name"
          },
          "css": {
            "type": "string",
            "description": "CSS required to import the font"
          },
          "updatedAt": {
            "type": "string",
            "description": "ISO-8601 date when the font was last modified"
          },
          "createdAt": {
            "type": "string",
            "description": "ISO-8601 date when the font was created"
          }
        }
      },
      "HttpError": {
        "title": "HttpError",
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
            "description": "Error status code"
          },
          "code": {
            "type": "string",
            "description": "Error code"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "details": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of error details"
              },
              {
                "type": "string",
                "description": "Error details"
              }
            ]
          }
        }
      }
    },
    "parameters": {
      "AccountId": {
        "name": "account_id",
        "in": "path",
        "description": "Video Cloud account ID.",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      },
      "ContentType": {
        "name": "Content-Type",
        "in": "header",
        "description": "Content-Type: application/json",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        },
        "example": "application/json"
      },
      "Authorization": {
        "name": "Authorization",
        "in": "header",
        "description": "Authorization: Bearer access_token (see [Getting Access Tokens](https://support.brightcove.com/oauth-api-sample-get-access-token))",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "BadRequestExperience": {
        "description": "BAD_REQUEST: Invalid In-Page Experience document, see response for details",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [{
                "$ref": "#/components/schemas/HttpError"
              }],
              "example": {
                "status": 400,
                "code": "BAD_REQUEST",
                "message": "Specified template does not exist"
              }
            }
          }
        }
      },
      "BadRequestTheme": {
        "description": "BAD_REQUEST: Invalid Theme document, see response for details",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [{
                "$ref": "#/components/schemas/HttpError"
              }],
              "example": {
                "status": 400,
                "code": "BAD_REQUEST",
                "details": [
                  "Path `name` is required."
                ]
              }
            }
          }
        }
      },
      "BadRequestFont": {
        "description": "BAD_REQUEST: Invalid Font document, see response for details",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [{
                "$ref": "#/components/schemas/HttpError"
              }],
              "example": {
                "status": 400,
                "code": "BAD_REQUEST",
                "details": [
                  "Path `name` is required."
                ]
              }
            }
          }
        }
      },
      "Unauthorized": {
        "description": "UNAUTHORIZED: Authentication failed - check to make sure your client credentials were correct for the access token"
      },
      "TooManyRequests": {
        "description": "TOO_MANY_REQUESTS: You are submitting too many simultaneous requests or too many requests per second"
      },
      "NotFoundExperience": {
        "description": "NOT_FOUND: The specified In-Page Experience does not exist",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [{
                "$ref": "#/components/schemas/HttpError"
              }],
              "example": {
                "status": 404,
                "code": "NOT_FOUND",
                "message": "Experience 123456 not found"
              }
            }
          }
        }
      },
      "NotFoundTemplate": {
        "description": "NOT_FOUND: The specified template does not exist",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [{
                "$ref": "#/components/schemas/HttpError"
              }],
              "example": {
                "status": 404,
                "code": "NOT_FOUND"
              }
            }
          }
        }
      },
      "NotFoundTheme": {
        "description": "NOT_FOUND: The specified theme does not exist",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [{
                "$ref": "#/components/schemas/HttpError"
              }],
              "example": {
                "status": 404,
                "code": "NOT_FOUND",
                "message": "Theme 123456 not found"
              }
            }
          }
        }
      },
      "NotFoundFont": {
        "description": "NOT_FOUND: The specified font does not exist",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [{
                "$ref": "#/components/schemas/HttpError"
              }],
              "example": {
                "status": 404,
                "code": "NOT_FOUND",
                "message": "Font 123456 not found"
              }
            }
          }
        }
      }
    }
  }
}
